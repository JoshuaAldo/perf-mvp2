<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="sec-ch-ua" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua</stringProp>
            <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;129&quot;, &quot;Not=A?Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;129&quot;</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-mobile" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
            <stringProp name="Header.value">?0</stringProp>
          </elementProp>
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
          </elementProp>
          <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
            <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
            <stringProp name="Header.value">1</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-platform" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
            <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36</stringProp>
          </elementProp>
          <elementProp name="X-XSRF-TOKEN" elementType="Header">
            <stringProp name="Header.name">X-XSRF-TOKEN</stringProp>
            <stringProp name="Header.value">${dynamicSigninState}</stringProp>
          </elementProp>
          <elementProp name="Cache-Control" elementType="Header">
            <stringProp name="Header.name">Cache-Control</stringProp>
            <stringProp name="Header.value">no-store, no-cache</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">lmswhsappsit02.hq.bni.co.id</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_2" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_2</stringProp>
            <stringProp name="Argument.value">lmswhsappsit01.hq.bni.co.id</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="collateralType" elementType="Argument">
            <stringProp name="Argument.name">collateralType</stringProp>
            <stringProp name="Argument.value">Kas / rekening (giro / tabungan, deposito, dll.)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="controlledType" elementType="Argument">
            <stringProp name="Argument.name">controlledType</stringProp>
            <stringProp name="Argument.value">Controlled</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CEF" elementType="Argument">
            <stringProp name="Argument.name">CEF</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="client_id" elementType="Argument">
            <stringProp name="Argument.name">client_id</stringProp>
            <stringProp name="Argument.value">vwmazbnidevclo</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="optimistClient_id" elementType="Argument">
            <stringProp name="Argument.name">optimistClient_id</stringProp>
            <stringProp name="Argument.value">OptimistBNISIT</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_3" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_3</stringProp>
            <stringProp name="Argument.value">vwmazbnidevclo.dev.fiscloudservices.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_4" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_4</stringProp>
            <stringProp name="Argument.value">vwmazbnidevopt.dev.fiscloudservices.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager">
        <collectionProp name="DNSCacheManager.servers"/>
        <collectionProp name="DNSCacheManager.hosts"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BP01_Application Stage">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Login Data">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">D:/Work/JMeter/CLO/MVP 2/Login Data 1.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">username,password</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="BP01_01_Login">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Hit CLO URL">
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/cls/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Purpose" elementType="Header">
                  <stringProp name="Header.name">Sec-Purpose</stringProp>
                  <stringProp name="Header.value">prefetch;prerender</stringProp>
                </elementProp>
                <elementProp name="Purpose" elementType="Header">
                  <stringProp name="Header.name">Purpose</stringProp>
                  <stringProp name="Header.value">prefetch</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get redirected URL state" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
              <stringProp name="RegexExtractor.refname">state</stringProp>
              <stringProp name="RegexExtractor.regex">state=([a-zA-Z0-9_-]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="TestPlan.comments">Get redirected URL state</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get redirected URL code_challenge" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
              <stringProp name="RegexExtractor.refname">code_challenge</stringProp>
              <stringProp name="RegexExtractor.regex">code_challenge=([a-zA-Z0-9_-]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1522772885"> IdP RI Webapp</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Hit Redirected IdP URL">
            <stringProp name="HTTPSampler.domain">${BASE_URL_4}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/Idp/BNI/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                  <stringProp name="Argument.value">${client_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="redirect_uri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">redirect_uri</stringProp>
                  <stringProp name="Argument.value">http://${BASE_URL_3}/authenticationservice/oidc</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="response_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">response_type</stringProp>
                  <stringProp name="Argument.value">code</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">openid</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="code_challenge" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">code_challenge</stringProp>
                  <stringProp name="Argument.value">${code_challenge}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="code_challenge_method" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">code_challenge_method</stringProp>
                  <stringProp name="Argument.value">S256</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="response_mode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">response_mode</stringProp>
                  <stringProp name="Argument.value">form_post</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">state</stringProp>
                  <stringProp name="Argument.value">${state}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="x-client-SKU" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">x-client-SKU</stringProp>
                  <stringProp name="Argument.value">ID_NET8_0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="x-client-ver" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">x-client-ver</stringProp>
                  <stringProp name="Argument.value">7.1.2.0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">if (prev.getResponseCode() == &quot;200&quot;) {
    prev.setSuccessful(true); // Mark as successful if 401 is expected
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Login Request Payload Generator">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.codec.binary.Base64
import groovy.json.JsonBuilder
import java.security.MessageDigest

// Generate a unique string for browserFootprint using a hash function (e.g., SHA-256)
def userAgent = &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36&quot;
def language = &quot;en&quot;
def screenWidth = 1920
def screenHeight = 1080
def timezone = &quot;Asia/Jakarta&quot;
def hash = MessageDigest.getInstance(&quot;SHA-256&quot;)
def footprintString = &quot;${userAgent}:${language}:${screenWidth}:${screenHeight}:${timezone}:${System.currentTimeMillis()}&quot;
def browserFootprint = hash.digest(footprintString.bytes).collect { String.format(&quot;%02x&quot;, it) }.join()

def browserFootprintB64 = Base64.encodeBase64String(browserFootprint.getBytes(&apos;UTF-8&apos;))
// Create the JSON structure for the request payload
def payload = [
    data: [
    themeNameParam: null,
    clientIdParam: &quot;${client_id}&quot;,
    pageTitle: &quot;DICT.COMMON_FIELDS.LOGIN_WIZARD_LOGIN_STEP_PAGE_TITLE&quot;,
    browserFields: &quot;webkit,ajax,boxModel,changeBubbles,checkClone,checkOn,cors,cssFloat,hrefNormalized,htmlSerialize,leadingWhitespace,noCloneChecked,noCloneEvent,opacity,optDisabled,style,submitBubbles,tbody,OS,platform&quot;,
    userNameParam: null,
    langParam: null,
    navigateParam: null,
    browserFootprint: &quot;557ce527b9b389cd30796fc85cb5f8e26f3ef0673cc6737f69cabef5851cbc0e&quot;,
    browserFootprintB64: &quot;eyd3ZWJraXQnOnRydWUsJ2FqYXgnOnRydWUsJ2JveE1vZGVsJzp0cnVlLCdjaGFuZ2VCdWJibGVzJzp1bmRlZmluZWQsJ2NoZWNrQ2xvbmUnOnRydWUsJ2NoZWNrT24nOnRydWUsJ2NvcnMnOnRydWUsJ2Nzc0Zsb2F0Jzp1bmRlZmluZWQsJ2hyZWZOb3JtYWxpemVkJzp1bmRlZmluZWQsJ2h0bWxTZXJpYWxpemUnOnVuZGVmaW5lZCwnbGVhZGluZ1doaXRlc3BhY2UnOnVuZGVmaW5lZCwnbm9DbG9uZUNoZWNrZWQnOnRydWUsJ25vQ2xvbmVFdmVudCc6dW5kZWZpbmVkLCdvcGFjaXR5Jzp1bmRlZmluZWQsJ29wdERpc2FibGVkJzp1bmRlZmluZWQsJ3N0eWxlJzp1bmRlZmluZWQsJ3N1Ym1pdEJ1YmJsZXMnOnVuZGVmaW5lZCwndGJvZHknOnVuZGVmaW5lZCwnT1MnOidNaWNyb3NvZnQgV2luZG93cycsJ3BsYXRmb3JtJzonV2luMzInfQ==&quot;,
    password: &quot;${password}&quot;,
    loginName: &quot;${username}&quot;,
    captcha: null,
    login: true
    ]
]

def jsonPayload = new JsonBuilder(payload).toString()

// Store the JSON payload in a JMeter variable
vars.put(&quot;loginRequestPayload&quot;, jsonPayload)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">// Assume your CSV variable is named &apos;csvVar&apos;
def csvVar = vars.get(&quot;username&quot;)
if (csvVar) {
    csvVar = csvVar.replaceAll(/^&quot;|&quot;$/, &quot;&quot;)
    vars.put(&quot;username&quot;, csvVar)
}
def csvVar2 = vars.get(&quot;password&quot;)
if (csvVar2) {
    // Menghapus spasi, tab, dan karakter &apos;;&apos; di akhir password (jika ada)
    csvVar2 = csvVar2.replaceAll(&quot;[\\s;]+$&quot;, &quot;&quot;).trim()
    vars.put(&quot;password&quot;, csvVar2)
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Do Login">
            <stringProp name="HTTPSampler.domain">${BASE_URL_4}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/Idp/BNI//rest/1.0/wizards/authentication/login?client_id=${client_id}&amp;redirect_uri=https%3A%2F%2F${BASE_URL_3}%2Fauthenticationservice%2Foidc&amp;response_type=code&amp;scope=openid&amp;code_challenge=${code_challenge}&amp;code_challenge_method=S256&amp;response_mode=form_post&amp;state=${state}&amp;x-client-SKU=ID_NET8_0&amp;x-client-ver=7.1.2.0</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${loginRequestPayload}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-FIS-IdP-Domain-URL" elementType="Header">
                  <stringProp name="Header.name">X-FIS-IdP-Domain-URL</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_4}/Idp/BNI/?client_id=${client_id}&amp;redirect_uri=https%3A%2F%2F${BASE_URL_3}%2Fauthenticationservice%2Foidc&amp;response_type=code&amp;scope=openid&amp;code_challenge=${code_challenge}&amp;code_challenge_method=S256&amp;response_mode=form_post&amp;state=${state}&amp;x-client-SKU=ID_NET8_0&amp;x-client-ver=7.1.2.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_4}/Idp/BNI/?client_id=${client_id}&amp;redirect_uri=https%3A%2F%2F${BASE_URL_3}%2Fauthenticationservice%2Foidc&amp;response_type=code&amp;scope=openid&amp;code_challenge=${code_challenge}&amp;code_challenge_method=S256&amp;response_mode=form_post&amp;state=${state}&amp;x-client-SKU=ID_NET8_0&amp;x-client-ver=7.1.2.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_4}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value"> Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="X-SunGard-IdP-API-Key" elementType="Header">
                  <stringProp name="Header.name">X-SunGard-IdP-API-Key</stringProp>
                  <stringProp name="Header.value">SunGard-IdP-Login</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1886947764">&quot;description&quot;:&quot;Authenticates multi-part user credentials&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Timestamp generator" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def timestamp = System.currentTimeMillis()

vars.put(&quot;currentTimestamp&quot;, String.valueOf(timestamp))</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">1000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Login Session Detail">
            <stringProp name="HTTPSampler.domain">${BASE_URL_4}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/Idp/BNI/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value">${currentTimestamp}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                  <stringProp name="Argument.value">${client_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="redirect_uri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">redirect_uri</stringProp>
                  <stringProp name="Argument.value">https://${BASE_URL_3}/authenticationservice/oidc</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="response_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">response_type</stringProp>
                  <stringProp name="Argument.value">code</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">openid</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="code_challenge" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">code_challenge</stringProp>
                  <stringProp name="Argument.value">${code_challenge}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="code_challenge_method" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">code_challenge_method</stringProp>
                  <stringProp name="Argument.value">S256</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="response_mode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">response_mode</stringProp>
                  <stringProp name="Argument.value">form_post</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">state</stringProp>
                  <stringProp name="Argument.value">${state}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="x-client-SKU" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">x-client-SKU</stringProp>
                  <stringProp name="Argument.value">ID_NET8_0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="x-client-ver" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">x-client-ver</stringProp>
                  <stringProp name="Argument.value">7.1.2.0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Code" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">code</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;code&quot; value=&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1920131968">SSO Login in progress</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authentication Process" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">authenticationservice/oidc</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">code</stringProp>
                  <stringProp name="Argument.value">${code}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">openid</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">state</stringProp>
                  <stringProp name="Argument.value">${state}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get sign in scope" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">signinScope</stringProp>
              <stringProp name="RegexExtractor.regex">name=&apos;scope&apos; value=&apos;(.+?)&apos;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get sign in state" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">signinState</stringProp>
              <stringProp name="RegexExtractor.regex">name=&apos;state&apos; value=&apos;(.+?)&apos;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get sign in code" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">signinCode</stringProp>
              <stringProp name="RegexExtractor.regex">name=&apos;code&apos; value=&apos;(.+?)&apos;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get sign in session state" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">signinSessionState</stringProp>
              <stringProp name="RegexExtractor.regex">name=&apos;session_state&apos; value=&apos;(.+?)&apos;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get sign in iss" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">signinIss</stringProp>
              <stringProp name="RegexExtractor.regex">name=&apos;iss&apos; value=&apos;(.+?)&apos;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1252119520">form method=&apos;post&apos;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sign In Process" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">cls/signin-oidc</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">code</stringProp>
                  <stringProp name="Argument.value">${signinCode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">${signinScope}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="iss" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">iss</stringProp>
                  <stringProp name="Argument.value">${signinIss}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">state</stringProp>
                  <stringProp name="Argument.value">${signinState}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="session_state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">session_state</stringProp>
                  <stringProp name="Argument.value">${signinSessionState}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get XSRF" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">XSRF</stringProp>
              <stringProp name="RegexExtractor.regex">XSRF-TOKEN=([^;]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">// Get the extracted value from the previous response
def dynamicValue = vars.get(&apos;XSRF&apos;)

// Set it to a new variable that will be used in HTTP Header Manager
vars.put(&apos;dynamicSigninState&apos;, dynamicValue)</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1457334603">Commercial Lending Suite</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="BP01_02_Click Customer Group Worklist" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click Customer Group Worklist" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/cls/api/omniproxy/User/WorklistView/List/customergroup</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="RequestFrom" elementType="Header">
                  <stringProp name="Header.name">RequestFrom</stringProp>
                  <stringProp name="Header.value">Angular</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Referer&#x9;https" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${BASE_URL_3}/cls/bui/worklist/customergroup</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="BP01_03_Search Customer Group" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Customer Group" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/cls/api/customergroup/customergroups/AdvanceSearch</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;sort&quot;:&quot;Name&quot;,&quot;direction&quot;:&quot;asc&quot;,&quot;pageSize&quot;:&quot;50&quot;,&quot;skip&quot;:0,&quot;advanceSearch&quot;:[{&quot;searchCriteria&quot;:&quot;Contains&quot;,&quot;searchOption&quot;:&quot;Name&quot;,&quot;searchText&quot;:&quot;Corporate Test Component&quot;,&quot;searchType&quot;:&quot;text&quot;},{&quot;searchCriteria&quot;:&quot;Contains&quot;,&quot;searchOption&quot;:&quot;CustomerGroupID&quot;,&quot;searchText&quot;:&quot;Corporate Test Component&quot;,&quot;searchType&quot;:&quot;text&quot;},{&quot;searchCriteria&quot;:&quot;Contains&quot;,&quot;searchOption&quot;:&quot;PortfolioOwner&quot;,&quot;searchText&quot;:&quot;Corporate Test Component&quot;,&quot;searchType&quot;:&quot;text&quot;}],&quot;searchAll&quot;:true,&quot;pageId&quot;:&quot;customergroup&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${BASE_URL_3}/cls/bui/worklist/customergroup</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://${BASE_URL_3}</stringProp>
                </elementProp>
                <elementProp name="RequestFrom" elementType="Header">
                  <stringProp name="Header.name">RequestFrom</stringProp>
                  <stringProp name="Header.value">Angular</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-store, no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:130.0) Gecko/20100101 Firefox/130.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Record ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">recordId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;RecordId&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Customer Group ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">customerGroupID</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CustomerGroupID&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Customer Group Name" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">customerGroupName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Name&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1614287698">&quot;totalCount&quot;:&quot;1&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">1000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="BP01_04_New Credit Application" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="New Credit Application">
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/cls/api/omniproxy/worklist/customergroup?configurationType=application&amp;actionType=create</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;CustomerGroupRecordId&quot;:&quot;${recordId}&quot;,&quot;CustomerGroupNo&quot;:&quot;${customerGroupID}&quot;,&quot;CustomerGroupName&quot;:&quot;${customerGroupName}&quot;,&quot;segment&quot;:&quot;Corporate&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Case Definition ID">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">caseId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Application Name">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">CreateApplicationName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;name&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">// Get the CreateApplicationName variable
def createAppName = vars.get(&quot;CreateApplicationName&quot;)

// Check if createAppName is not null or NOT_FOUND
if (createAppName != null &amp;&amp; createAppName != &quot;NOT_FOUND&quot;) {
    // Define the regex pattern to extract the last number after the last dash
    def numberPattern = /.*-(\d+)$/
    
    // Create a matcher for the createAppName
    def matcher = (createAppName =~ numberPattern)
    
    // Check if the matcher found a result
    if (matcher.find()) {
        // Get the last number
        def applicationNumber = matcher.group(1) // Extract the number
        vars.put(&quot;ApplicationNumber&quot;, applicationNumber) // Store it in a JMeter variable
    } else {
        vars.put(&quot;ApplicationNumber&quot;, &quot;NOT_FOUND&quot;) // Default value if not found
    }
} else {
    vars.put(&quot;ApplicationNumber&quot;, &quot;NOT_FOUND&quot;) // Default value if createAppName is not found
}
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${BASE_URL_3}/cls/bui/worklist/customergroup</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://${BASE_URL_3}</stringProp>
                </elementProp>
                <elementProp name="RequestFrom" elementType="Header">
                  <stringProp name="Header.name">RequestFrom</stringProp>
                  <stringProp name="Header.value">Angular</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=0</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-store, no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:130.0) Gecko/20100101 Firefox/130.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="BP01_05_Click Application Worklist" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click Application Worklist" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/cls/api/omniproxy/user/worklisthistory/application</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="RequestFrom" elementType="Header">
                  <stringProp name="Header.name">RequestFrom</stringProp>
                  <stringProp name="Header.value">Angular</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Referer&#x9;https" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${BASE_URL_3}/cls/bui/worklist/application</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="127103717">&quot;totalCount&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="BP01_06_Search Application" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Application" enabled="false">
            <stringProp name="TestPlan.comments">For Dynamic Application</stringProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/cls/api/omniproxy/dataobject/creditapplication</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fields" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">name,Id,CustomerGroupName,State,UpdateTime,assigneeId,TAE,caseId,dealNumber,CustomerGroupRecordId,CustomerGroupNumber,assigneeDisplayName</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">fields</stringProp>
                </elementProp>
                <elementProp name="view" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">select</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">view</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">for:me</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
                <elementProp name="searchAllQuery" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">%20%22name%22:contains:%27${ApplicationNumber}%27%20%22dealNumber%22:contains:%27${ApplicationNumber}%27%20%22CustomerGroupName%22:contains:%27${ApplicationNumber}%27%20%22assigneeDisplayName%22:contains:%27${ApplicationNumber}%27%20%22TAE%22:eq:%27${ApplicationNumber}%27%20sort:UpdateTime:desc</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchAllQuery</stringProp>
                </elementProp>
                <elementProp name="size" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">size</stringProp>
                </elementProp>
                <elementProp name="start" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">start</stringProp>
                </elementProp>
                <elementProp name="pageId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">application</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">pageId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="RequestFrom" elementType="Header">
                  <stringProp name="Header.name">RequestFrom</stringProp>
                  <stringProp name="Header.value">Angular</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Referer&#x9;https" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${BASE_URL_3}/cls/bui/worklist/application</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Case Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">caseId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;caseId&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Application Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Customer Group Record Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">customerGroupRecordId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CustomerGroupRecordId&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Customer Group Name" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">customerGroupName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CustomerGroupName&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="127103717">&quot;totalCount&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Application Static" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/cls/api/omniproxy/dataobject/creditapplication</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fields" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">name,Id,CustomerGroupName,State,UpdateTime,assigneeId,TAE,caseId,dealNumber,CustomerGroupRecordId,CustomerGroupNumber,assigneeDisplayName</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">fields</stringProp>
                </elementProp>
                <elementProp name="view" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">select</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">view</stringProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">for:me</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                </elementProp>
                <elementProp name="searchAllQuery" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">%20%22name%22:contains:%27Corporate%20Test%20Component%27%20%22dealNumber%22:contains:%27Corporate%20Test%20Component%27%20%22CustomerGroupName%22:contains:%27Corporate%20Test%20Component%27%20%22assigneeDisplayName%22:contains:%27Corporate%20Test%20Component%27%20%22TAE%22:eq:%27Corporate%20Test%20Component%27%20sort:UpdateTime:desc</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">searchAllQuery</stringProp>
                </elementProp>
                <elementProp name="size" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">size</stringProp>
                </elementProp>
                <elementProp name="start" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">start</stringProp>
                </elementProp>
                <elementProp name="pageId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">application</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">pageId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="RequestFrom" elementType="Header">
                  <stringProp name="Header.name">RequestFrom</stringProp>
                  <stringProp name="Header.value">Angular</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Referer&#x9;https" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${BASE_URL_3}/cls/bui/worklist/application</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Case Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">caseId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;caseId&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Application Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicationId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Customer Group Record Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">customerGroupRecordId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CustomerGroupRecordId&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Customer Group Name" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">customerGroupName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CustomerGroupName&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="127103717">&quot;totalCount&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="BP01_07_Open Application" enabled="true">
          <stringProp name="TestPlan.comments">BNI Dev</stringProp>
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Open Application" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/cls/api/omniproxy/worklist/application?configurationType=application&amp;actionType=edit</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;CaseId&quot;:&quot;${caseId}&quot;,&quot;ApplicationId&quot;:&quot;${applicationId}&quot;,&quot;CustomerGroupRecordId&quot;:&quot;${customerGroupRecordId}&quot;,&quot;CustomerGroupName&quot;:&quot;${customerGroupName}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="RequestFrom" elementType="Header">
                  <stringProp name="Header.name">RequestFrom</stringProp>
                  <stringProp name="Header.value">Angular</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Referer&#x9;https" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${BASE_URL_3}/cls/bui/worklist/application</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">idCAS1</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Customer Group No" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">customerGroupNo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CustomerGroupNo&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Customer Group Record Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">customerGroupRecordId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CustomerGroupRecordId&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Collateral Count" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">collateralCount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;collateralCount&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Withdrawal Letter Details Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">withdrawalLetterDetails</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;WithdrawalLetterDetails&quot;:(null|&quot;(.*?)&quot;|\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Initiator Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">initiator</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;initiator&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Covenant Count Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">covenantCount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;covenantCount&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Regulatory Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">regulatory</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Regulatory&quot;:(\{&quot;US&quot;:&quot;(true|false)&quot;\})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get baseURL_Optimist_FE Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">baseURL_Optimist_FE</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;baseURL_Optimist_FE&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get googleApiUrl Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">googleApiUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;googleApiUrl&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Display Precision Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">displayPrecision</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;DisplayPrecision&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get isDecisioned Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">isDecisioned</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;isDecisioned&quot;:(true|false)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get notActivationCovenantCount Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">notActivationCovenantCount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;notActivationCovenantCount&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get isWithdrawnBttnDisabled Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">isWithdrawnBttnDisabled</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;isWithdrawnBttnDisabled&quot;:(true|false)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get customerReOpenCount Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">customerReOpenCount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;customerReOpenCount&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Manual Decision Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">manualDecision</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ManualDecision&quot;:(null|&quot;(.*?)&quot;|\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get condition Count Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">conditionCount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;conditionCount&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get QATesting Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">QATesting</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;QATesting&quot;:(true|false)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Legal Entity Group Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">legalEntityGroup</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;LegalEntityGroup&quot;:(\{.*\&quot;PortfolioUserName&quot;:null})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Display Divisor Label Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">displayDivisorLabel</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;DisplayDivisorLabel&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get id deal setup" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">idDealSetup</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;dealSetup&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get candidate User Ids Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">candidateUserIds</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;candidateUserIds&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get google Map Key Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">googleMapKey</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;googleMapKey&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get deal Number Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">dealNumber</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;dealNumber&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Approval_TAE Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Approval_TAE</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Approval_TAE&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Collection Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">collection</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Collection&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get task Name Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">taskName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;taskName&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get policyExceptionsCount Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">policyExceptionsCount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;policyExceptionsCount&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get google Map Url Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">googleMapUrl</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;googleMapUrl&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get application Start Date Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicationStartDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;applicationStartDate&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get application End Date Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicationEndDate</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;applicationEndDate&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get definition Id Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">definitionId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;__definitionId&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get definition Key Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">definitionKey</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;__definitionKey&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get ReferenceId Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">referenceId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;ReferenceId&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Data Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">data</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Data&quot;:({[^}]*})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get IssueDeclineLetterDocument Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">IssueDeclineLetterDocument</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;IssueDeclineLetterDocument&quot;:(null|&quot;(.*?)&quot;|\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get approvalConditionCount Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">approvalConditionCount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;approvalConditionCount&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Customer Group Name Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">CustomerGroupName</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;CustomerGroupName&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get isApproved Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">isApproved</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;isApproved&quot;:(true|false)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get corpCredInitCompleted Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">corpCredInitCompleted</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;corpCredInitCompleted&quot;:(true|false)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get googleApiKey Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">googleApiKey</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;googleApiKey&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get facilitiesCount Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">facilitiesCount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;facilitiesCount&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get activationConditionCount Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">activationConditionCount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;activationConditionCount&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get borrowerReviewList Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">borrowerReviewList</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;borrowerReviewList&quot;:(.*?)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get assigneeId Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">assigneeId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;assigneeId&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get isWithdrawn Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">isWithdrawn</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;isWithdrawn&quot;:(true|false)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get servicingSystem Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">servicingSystem</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;servicingSystem&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get importTryCount Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">importTryCount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;importTryCount&quot;:(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get stages Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">stages</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;stages&quot;:(\[[^\]]*\])</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get FXRateSource Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">FXRateSource</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;FXRateSource&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get applicationStatus Value" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">applicationStatus</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;applicationStatus&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Name" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">name</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;Name&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">1000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Id CAS" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/cls/api/omniproxy/flowablework/platform-api/case-instances/${idCAS1}/navigation-elements</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="RequestFrom" elementType="Header">
                  <stringProp name="Header.name">RequestFrom</stringProp>
                  <stringProp name="Header.value">Angular</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i </stringProp>
                </elementProp>
                <elementProp name="referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_3}/cls/bui/mdi/flowable</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">Sec-Ch-Ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;134&quot;, &quot;Not:A-Brand&quot;;v=&quot;24&quot;, &quot;Google Chrome&quot;;v=&quot;134&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">Sec-Ch-Ua-Mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">Sec-Ch-Ua-Platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="user-agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="x-xsrf-token" elementType="Header">
                  <stringProp name="Header.name">X-Xsrf-Token</stringProp>
                  <stringProp name="Header.value">${dynamicSigninState}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get id CAS" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">idCAS</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot; : &quot;([A-Za-z0-9\-]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Id FRM" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/cls/api/omniproxy/flowablework/platform-api/case-pages/${idCAS}/form</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="RequestFrom" elementType="Header">
                  <stringProp name="Header.name">RequestFrom</stringProp>
                  <stringProp name="Header.value">Angular</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i </stringProp>
                </elementProp>
                <elementProp name="referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_3}/cls/bui/mdi/flowable</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">Sec-Ch-Ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;134&quot;, &quot;Not:A-Brand&quot;;v=&quot;24&quot;, &quot;Google Chrome&quot;;v=&quot;134&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">Sec-Ch-Ua-Mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">Sec-Ch-Ua-Platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="user-agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="x-xsrf-token" elementType="Header">
                  <stringProp name="Header.name">X-Xsrf-Token</stringProp>
                  <stringProp name="Header.value">${dynamicSigninState}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get id FRM" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">idForm</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;\s*:\s*&quot;([A-Za-z0-9\-]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get data checklist" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/cls/api/omniproxy/flowablework/platform-api/search/query-tasks</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="rootScopeId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${idCAS1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">rootScopeId</stringProp>
                </elementProp>
                <elementProp name="rootScopeType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cmmn</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">rootScopeType</stringProp>
                </elementProp>
                <elementProp name="completed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">completed</stringProp>
                </elementProp>
                <elementProp name="includeFields" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">name,assigneeDisplayName,assigneeId,id,caseId,claimedUserId,dueDate,assignee,category,taskDefinitionId,endTime,scopeType,priority,permissions</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">includeFields</stringProp>
                </elementProp>
                <elementProp name="sort" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">priority</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sort</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="RequestFrom" elementType="Header">
                  <stringProp name="Header.name">RequestFrom</stringProp>
                  <stringProp name="Header.value">Angular</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i </stringProp>
                </elementProp>
                <elementProp name="referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_3}/cls/bui/mdi/flowable</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">Sec-Ch-Ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;134&quot;, &quot;Not:A-Brand&quot;;v=&quot;24&quot;, &quot;Google Chrome&quot;;v=&quot;134&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">Sec-Ch-Ua-Mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">Sec-Ch-Ua-Platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="user-agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="x-xsrf-token" elementType="Header">
                  <stringProp name="Header.name">X-Xsrf-Token</stringProp>
                  <stringProp name="Header.value">${dynamicSigninState}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get id Task UAM" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">idClaimUAM</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;\s*:\s*&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">2</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="BP01_08_Stage 1 Deal Info">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Open Deal Info">
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/cls/api/omniproxy/flowablework/platform-api/tasks/${idDealSetup}/variables</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="origin" elementType="Header">
                  <stringProp name="Header.name">origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_3}</stringProp>
                </elementProp>
                <elementProp name="priority" elementType="Header">
                  <stringProp name="Header.name">priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="referer" elementType="Header">
                  <stringProp name="Header.name">referer</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_3}/cls/bui/mdi/flowable</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;134&quot;, &quot;Not:A-Brand&quot;;v=&quot;24&quot;, &quot;Google Chrome&quot;;v=&quot;134&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-dest" elementType="Header">
                  <stringProp name="Header.name">sec-fetch-dest</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-mode" elementType="Header">
                  <stringProp name="Header.name">sec-fetch-mode</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-site" elementType="Header">
                  <stringProp name="Header.name">sec-fetch-site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="user-agent" elementType="Header">
                  <stringProp name="Header.name">user-agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="x-xsrf-token" elementType="Header">
                  <stringProp name="Header.name">x-xsrf-token</stringProp>
                  <stringProp name="Header.value">${dynamicSigninState}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script"></stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get deal info data" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">dealInfoData</stringProp>
              <stringProp name="RegexExtractor.regex">(\{(?:[^{}]|&quot;(?:\\.|[^&quot;\\])*&quot;|\{(?:[^{}]|&quot;(?:\\.|[^&quot;\\])*&quot;|\{[^{}]*\})*\})*\})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Input Deal Info" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/cls/api/omniproxy/flowablework/platform-api/tasks/${idDealSetup}/complete</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dealInfoData}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script"></stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="origin" elementType="Header">
                  <stringProp name="Header.name">origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_3}</stringProp>
                </elementProp>
                <elementProp name="priority" elementType="Header">
                  <stringProp name="Header.name">priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="referer" elementType="Header">
                  <stringProp name="Header.name">referer</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_3}/cls/bui/mdi/flowable</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;134&quot;, &quot;Not:A-Brand&quot;;v=&quot;24&quot;, &quot;Google Chrome&quot;;v=&quot;134&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-dest" elementType="Header">
                  <stringProp name="Header.name">sec-fetch-dest</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-mode" elementType="Header">
                  <stringProp name="Header.name">sec-fetch-mode</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-site" elementType="Header">
                  <stringProp name="Header.name">sec-fetch-site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="user-agent" elementType="Header">
                  <stringProp name="Header.name">user-agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="x-xsrf-token" elementType="Header">
                  <stringProp name="Header.name">x-xsrf-token</stringProp>
                  <stringProp name="Header.value">${dynamicSigninState}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="BP01_09_Stage 1 Task UAM" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Claim Task UAM" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/cls/api/omniproxy/flowablework/action-api/action-repository/action-definitions/key/CRED_A005/execute?formId=${idForm}&amp;formFieldId=CRED_F018_work-action4</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;taskId&quot;:&quot;${idClaimUAM}&quot;,&quot;taskName&quot;:&quot;Test UAM&quot;,&quot;caseId&quot;:&quot;${idCAS1}&quot;,&quot;claimedUserId&quot;:&quot;${initiator}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="origin" elementType="Header">
                  <stringProp name="Header.name">origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_3}</stringProp>
                </elementProp>
                <elementProp name="priority" elementType="Header">
                  <stringProp name="Header.name">priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="referer" elementType="Header">
                  <stringProp name="Header.name">referer</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_3}/cls/bui/mdi/flowable</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;134&quot;, &quot;Not:A-Brand&quot;;v=&quot;24&quot;, &quot;Google Chrome&quot;;v=&quot;134&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-dest" elementType="Header">
                  <stringProp name="Header.name">sec-fetch-dest</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-mode" elementType="Header">
                  <stringProp name="Header.name">sec-fetch-mode</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-site" elementType="Header">
                  <stringProp name="Header.name">sec-fetch-site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="user-agent" elementType="Header">
                  <stringProp name="Header.name">user-agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="x-xsrf-token" elementType="Header">
                  <stringProp name="Header.name">x-xsrf-token</stringProp>
                  <stringProp name="Header.value">${dynamicSigninState}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Open Task UAM" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/cls/api/omniproxy/flowablework/platform-api/tasks/${idClaimUAM}/complete</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;exception&quot;:null,&quot;parent&quot;:{&quot;exception&quot;:null,&quot;CustomerGroupRecordId&quot;:&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a&quot;,&quot;WithdrawalLetterDetails&quot;:null,&quot;initiator&quot;:&quot;TESTUSER1.BNI@CLO.COM&quot;,&quot;Regulatory&quot;:{&quot;US&quot;:&quot;false&quot;},&quot;covenantCount&quot;:0,&quot;baseURL_Optimist_FE&quot;:&quot;https://vwmazbnidevopt.dev.fiscloudservices.com/Optimist8_v4/&quot;,&quot;googleApiUrl&quot;:&quot;https://maps.googleapis.com/maps/api&quot;,&quot;DisplayPrecision&quot;:0,&quot;singleDocName&quot;:null,&quot;applicationStatus&quot;:&quot;In Progress&quot;,&quot;isDecisioned&quot;:false,&quot;notActivationCovenantCount&quot;:0,&quot;customerReOpenCount&quot;:0,&quot;isWithdrawnBttnDisabled&quot;:true,&quot;segment&quot;:&quot;Corporate&quot;,&quot;ManualDecision&quot;:null,&quot;GeneralActivity&quot;:true,&quot;id&quot;:&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4&quot;,&quot;conditionCount&quot;:0,&quot;createSingleDoc&quot;:false,&quot;QATesting&quot;:false,&quot;dealSetupComplete&quot;:true,&quot;dealSetup&quot;:&quot;TSK-71ef9708-03e0-11f0-bc6a-000d3a04bee4&quot;,&quot;LegalEntityGroup&quot;:{&quot;Description&quot;:null,&quot;DefaultLanguage&quot;:&quot;English&quot;,&quot;ParentRecordId&quot;:null,&quot;ChildLegalEntityGroups&quot;:[],&quot;Comments&quot;:[{&quot;Id&quot;:&quot;2728720f-2b3f-4451-9e9b-076ed6e5dec2&quot;,&quot;EntityType&quot;:&quot;LegalEntityGroup&quot;,&quot;Type&quot;:&quot;Notes&quot;,&quot;Comment&quot;:null}],&quot;Users&quot;:[{&quot;Id&quot;:null,&quot;Type&quot;:&quot;Relationship Manager&quot;,&quot;RelationshipType&quot;:&quot;Primary&quot;,&quot;Description&quot;:&quot;TestUser1 BNI&quot;,&quot;UserEmailId&quot;:&quot;TESTUSER1.BNI@CLO.COM&quot;,&quot;Name&quot;:&quot;TestUser1 BNI&quot;}],&quot;LinkedLegalEntityGroupAliases&quot;:[],&quot;Name&quot;:&quot;Corporate Test Component&quot;,&quot;Type&quot;:&quot;Borrowing Group&quot;,&quot;ConfidentialHandlingFlag&quot;:false,&quot;ParentLegalEntityGroup&quot;:null,&quot;CustomerGroupID&quot;:&quot;BNI-GRP-B31E7E&quot;,&quot;LinkedLegalEntities&quot;:[{&quot;RecordId&quot;:&quot;06eb877b-db47-4736-8f5b-6149a04ceae3&quot;,&quot;Description&quot;:null,&quot;EntityStatus&quot;:null,&quot;InternalEntityType&quot;:&quot;Company&quot;,&quot;LegalForm&quot;:&quot;PT&quot;,&quot;CustomerID&quot;:&quot;BNI-CUS-E8C35A&quot;,&quot;pii_InternalRating&quot;:null,&quot;pii_InternalRatingDate&quot;:null,&quot;ShortName&quot;:&quot;Test 234 New&quot;,&quot;IndustryCode&quot;:null,&quot;IndustryDesc&quot;:null,&quot;pii_CreditScore&quot;:null,&quot;pii_CreditScoreDate&quot;:null,&quot;Title&quot;:null,&quot;FirstName&quot;:null,&quot;MiddleName&quot;:null,&quot;LastName&quot;:null,&quot;Suffix&quot;:null,&quot;FullName&quot;:&quot;Test 234 New&quot;,&quot;AssignedPrimaryPortfolio&quot;:&quot;Manager Testing&quot;,&quot;PortfolioOwner&quot;:null,&quot;RelationshipSince&quot;:null,&quot;pii_IDReference&quot;:null,&quot;MaritalStatus&quot;:null,&quot;pii_DateOfBirth&quot;:null,&quot;EmploymentStatus&quot;:null,&quot;CurrentEmployer&quot;:null,&quot;TypeOfBusiness&quot;:null,&quot;JobTitle&quot;:null,&quot;pii_IncomeEmployment&quot;:null,&quot;pii_IncomeOther&quot;:null,&quot;pii_IncomeTotal&quot;:null,&quot;IncorporationDate&quot;:null,&quot;ResolutionDate&quot;:null,&quot;NoOfSigners&quot;:null,&quot;NoOfEmployees&quot;:null,&quot;CurrentOwnershipDate&quot;:null,&quot;TotalSalesInd&quot;:null,&quot;TotalSalesDate&quot;:null,&quot;RegOType&quot;:null,&quot;PriorBankruptcyDate&quot;:null,&quot;OutstandingObligationAmount&quot;:null,&quot;pii_TrustName&quot;:null,&quot;OutOfMarketFinancing&quot;:null,&quot;LastReviewDate&quot;:null,&quot;NextReviewDate&quot;:null,&quot;LEI&quot;:null,&quot;EntityType&quot;:&quot;Company&quot;,&quot;RegulatoryEntityType&quot;:null,&quot;TradingFlag&quot;:null,&quot;Gender&quot;:null,&quot;Spouse&quot;:null,&quot;NoOfDependents&quot;:null,&quot;ReviewFrequency&quot;:null,&quot;TotalSalesGroup&quot;:null,&quot;TotalSalesGroupCurrencyISO&quot;:null,&quot;TotalSalesIndCurrencyISO&quot;:null,&quot;TotalAssetsGroup&quot;:null,&quot;TotalAssetsGroupCurrencyISO&quot;:null,&quot;TotalAssetsInd&quot;:null,&quot;TotalAssetsDate&quot;:null,&quot;TotalAssetsIndCurrencyISO&quot;:null,&quot;RegulatedFlag&quot;:null,&quot;FinancialEntityFlag&quot;:null,&quot;RegulatoryCCRFlag&quot;:null,&quot;RegulatoryCRFlag&quot;:null,&quot;RegulatoryCVAFlag&quot;:null,&quot;BusinessStatus&quot;:null,&quot;BusinessStatusDate&quot;:null,&quot;SovereignTreatmentFlag&quot;:null,&quot;QualifiedCCPFlag&quot;:null,&quot;SMEFlag&quot;:null,&quot;QualifiedMDBFlag&quot;:null,&quot;EquityScalingFlag&quot;:null,&quot;OverrideRiskWeight&quot;:null,&quot;IdiosyncraticWeight&quot;:null,&quot;LegalJurisdiction&quot;:null,&quot;RegulatoryJurisdiction&quot;:null,&quot;InstitutionalProtectionFlag&quot;:null,&quot;DefunctDate&quot;:null,&quot;pii_PrimaryIdentifier&quot;:&quot;123456789009811&quot;,&quot;pii_PrimaryIdentifierType&quot;:null,&quot;pii_PrimaryIDDateOfIssue&quot;:null,&quot;pii_PrimaryIDDateOfExpiration&quot;:null,&quot;DBA&quot;:null,&quot;EmploymentSince&quot;:null,&quot;OutstandingObligationAmountCurrencyISO&quot;:null,&quot;OutstandingObligationDate&quot;:null,&quot;OOMarketFlag&quot;:null,&quot;CustomerClassification&quot;:null,&quot;Website&quot;:null,&quot;pii_Race&quot;:null,&quot;pii_Ethnicity&quot;:null,&quot;CitizenshipStatus&quot;:null,&quot;FATCAStatus&quot;:null,&quot;FATCACompliant&quot;:null,&quot;ConfidentialHandlingFlag&quot;:null,&quot;InternalCustomerFlag&quot;:null,&quot;DefaultLanguage&quot;:null,&quot;SecondaryIDType&quot;:null,&quot;pii_SecondaryIDReference&quot;:null,&quot;SecondaryIDDateOfIssue&quot;:null,&quot;SecondaryIDDateOfExpiration&quot;:null,&quot;pii_PhoneNumber1&quot;:null,&quot;pii_ExtensionNumber1&quot;:null,&quot;PhoneType1&quot;:null,&quot;pii_PhoneNumber2&quot;:null,&quot;pii_ExtensionNumber2&quot;:null,&quot;PhoneType2&quot;:null,&quot;pii_EmailAddress&quot;:null,&quot;pii_FaxNumber&quot;:null,&quot;RegOFlag&quot;:null,&quot;PriorBankruptcyFlag&quot;:null,&quot;OutstandingLiensFlag&quot;:null,&quot;PersonalTrustFlag&quot;:null,&quot;PrimaryContact&quot;:null,&quot;ReviewFrequencyType&quot;:null,&quot;EmployerAddress&quot;:null,&quot;EmployerCity&quot;:null,&quot;EmployerStateProvince&quot;:null,&quot;EmployerPostalCode&quot;:null,&quot;pii_CurrentAddress&quot;:null,&quot;pii_CurrentAddressCity&quot;:null,&quot;pii_CurrentAddressStateProvince&quot;:null,&quot;pii_CurrentAddressPostalCode&quot;:null,&quot;pii_SecondaryAddress&quot;:null,&quot;pii_SecondaryAddressCity&quot;:null,&quot;pii_SecondaryAddressStateProvince&quot;:null,&quot;pii_SecondaryAddressPostalCode&quot;:null,&quot;DefaultGLUnit&quot;:null,&quot;ServicingUnit&quot;:null,&quot;pii_DefaultInboundBankAddress&quot;:null,&quot;pii_DefaultInboundBankCity&quot;:null,&quot;pii_DefaultInboundBankStateProvince&quot;:null,&quot;pii_DefaultInboundBankPostalCode&quot;:null,&quot;pii_DefaultInboundBankCountry&quot;:null,&quot;pii_DefaultInboundABATransitNumber&quot;:null,&quot;pii_DefaultInboundBankAccountType&quot;:null,&quot;pii_DefaultInboundBankAccountName&quot;:null,&quot;pii_DefaultInboundBankAccountNumber&quot;:null,&quot;pii_DefaultInboundBankContact&quot;:null,&quot;pii_DefaultInboundBankName&quot;:null,&quot;pii_DefaultInboundBankContactPhoneNumber&quot;:null,&quot;pii_DefaultInboundBankFaxNumber&quot;:null,&quot;pii_DefaultInboundBankBranchName&quot;:null,&quot;pii_DefaultOutboundBankAddress&quot;:null,&quot;pii_DefaultOutboundBankCity&quot;:null,&quot;pii_DefaultOutboundBankStateProvince&quot;:null,&quot;pii_DefaultOutboundBankPostalCode&quot;:null,&quot;pii_DefaultOutboundBankCountry&quot;:null,&quot;pii_DefaultOutboundABATransitNumber&quot;:null,&quot;pii_DefaultOutboundBankAccountType&quot;:null,&quot;pii_DefaultOutboundBankAccountName&quot;:null,&quot;pii_DefaultOutboundBankAccountNumber&quot;:null,&quot;pii_DefaultOutboundBankContact&quot;:null,&quot;pii_DefaultOutboundBankName&quot;:null,&quot;pii_DefaultOutboundBankContactPhoneNumber&quot;:null,&quot;pii_DefaultOutboundBankFaxNumber&quot;:null,&quot;pii_DefaultOutboundBankBranchName&quot;:null,&quot;pii_CurrentAddressCountry&quot;:null,&quot;CurrentAddressType&quot;:null,&quot;pii_SecondaryAddressCountry&quot;:null,&quot;SecondaryAddressType&quot;:null,&quot;TaxStatus&quot;:null,&quot;pii_SecondaryAddressCounty&quot;:null,&quot;pii_CurrentAddressCounty&quot;:null,&quot;InternalEntityTypeCode&quot;:null,&quot;ConfidentialHandling&quot;:null,&quot;InternalCustomer&quot;:null,&quot;ApprovedDirectLiabilityLimit&quot;:null,&quot;ApprovedTotalLiabilityLimit&quot;:null,&quot;LimitsApprovedDate&quot;:null,&quot;DefaultInboundPaymentCurrencyType&quot;:null,&quot;DefaultOutboundPaymentCurrencyType&quot;:null,&quot;DefaultInboundPaymentCode&quot;:null,&quot;DefaultOutboundPaymentCode&quot;:null,&quot;DefaultInboundPaymentSpecialInstructions&quot;:null,&quot;DefaultOutboundPaymentSpecialInstructions&quot;:null,&quot;pii_PreviousAddressCountry&quot;:null,&quot;PreviousAddressType&quot;:null,&quot;CurrentAddressSince&quot;:null,&quot;PreviousAddressSince&quot;:null,&quot;SecondaryAddressSince&quot;:null,&quot;ServicingUnitSection&quot;:null,&quot;InvestorIndicator&quot;:null,&quot;PDValue&quot;:null,&quot;LGDValue&quot;:null,&quot;CurrentAddressIdentifier&quot;:null,&quot;CurrentAddressName1&quot;:null,&quot;SecondaryAddressIdentifier&quot;:null,&quot;SecondaryAddressName1&quot;:null,&quot;DefaultInboundCashOffsetType&quot;:null,&quot;DefaultOutboundCashOffsetType&quot;:null,&quot;DefaultInboundSwiftIdentifier&quot;:null,&quot;DefaultOutboundSwiftIdentifier&quot;:null,&quot;ExternalRatingType&quot;:null,&quot;FullName2&quot;:null,&quot;FullName3&quot;:null,&quot;SortName&quot;:null,&quot;DefaultCurrencyType&quot;:null,&quot;WatchStatusIndicator&quot;:null,&quot;TotalGuarantees&quot;:null,&quot;WatchListDate&quot;:null,&quot;DispositionType&quot;:null,&quot;PublishedName&quot;:null,&quot;BorrowerIndicatorFlag&quot;:null,&quot;WatchListReason&quot;:null,&quot;CurrentAddressName2&quot;:null,&quot;CurrentAddressName3&quot;:null,&quot;pii_CurrentAddress2&quot;:null,&quot;pii_CurrentAddress3&quot;:null,&quot;pii_CurrentAddress4&quot;:null,&quot;pii_CurrentAddressTelexNumber&quot;:null,&quot;pii_CurrentAddressSwiftIdentifier&quot;:null,&quot;SecurityDesignation&quot;:null,&quot;SecondaryAddressName2&quot;:null,&quot;SecondaryAddressName3&quot;:null,&quot;pii_SecondaryAddress2&quot;:null,&quot;pii_SecondaryAddress3&quot;:null,&quot;pii_SecondaryAddress4&quot;:null,&quot;pii_SecondaryAddressPhone1&quot;:null,&quot;pii_SecondaryAddressPhone2&quot;:null,&quot;pii_SecondaryAddressFaxNumber&quot;:null,&quot;pii_SecondaryAddressTelexNumber&quot;:null,&quot;pii_SecondaryAddressSwiftIdentifier&quot;:null,&quot;pii_SecondaryAddressEmailAddress&quot;:null,&quot;InternalOrganisation&quot;:null,&quot;LinkedBackgroundReports&quot;:[],&quot;LinkedLegalEntityAliases&quot;:[],&quot;Comments&quot;:[],&quot;CountrySubRegions&quot;:[],&quot;Locations&quot;:[],&quot;Users&quot;:[],&quot;LinkedRelationships&quot;:[],&quot;Industries&quot;:[],&quot;Contacts&quot;:[],&quot;CountryOfIncorpOrResidence&quot;:&quot;Indonesia&quot;,&quot;BusinessEntityType&quot;:null,&quot;DoingBusinessAs&quot;:null,&quot;CustomerSegment&quot;:&quot;Corporate&quot;,&quot;LMSID&quot;:null,&quot;customerQuadrant&quot;:null,&quot;portfolioNeeded&quot;:null,&quot;customerRemarks&quot;:null,&quot;LinkedPortfolios&quot;:[{&quot;LegalEntityRecordId&quot;:&quot;06eb877b-db47-4736-8f5b-6149a04ceae3&quot;,&quot;PortfolioRecordId&quot;:&quot;15592359&quot;,&quot;RelationshipType&quot;:&quot;Primary Portfolio&quot;,&quot;PortfolioDataSource&quot;:null,&quot;LegalEntityDataSource&quot;:null,&quot;PortfolioName&quot;:&quot;Manager Testing&quot;,&quot;PortfolioType&quot;:&quot;Portfolio&quot;,&quot;PortfolioDescription&quot;:&quot;Sample Portfolio&quot;,&quot;EffectiveRoot&quot;:{&quot;AncestorLevel&quot;:3,&quot;AncestorPortfolioRecordId&quot;:&quot;7887312&quot;,&quot;AncestorPortfolioName&quot;:&quot;TestPortfolio&quot;,&quot;AncestorCustomAttribute&quot;:{&quot;Integration&quot;:{&quot;ServicingSystem&quot;:&quot;NA&quot;,&quot;CLOOpportunity&quot;:false,&quot;Dynamics&quot;:false,&quot;IntelligentKnowledgeCenter&quot;:false,&quot;Salesforce&quot;:false},&quot;AppRegion&quot;:&quot;US&quot;,&quot;PrimaryCurrencyISO&quot;:&quot;USD&quot;,&quot;ApplicationWithdrawTimer&quot;:&quot;P5D&quot;,&quot;ApplicationREGBWaitTimer&quot;:&quot;P1D&quot;,&quot;CovenantLeadDays&quot;:90,&quot;TestAttribute&quot;:&quot;A1&quot;}}}]}],&quot;exchangeRateDate&quot;:null,&quot;segment&quot;:&quot;Corporate&quot;,&quot;PortfolioOwner&quot;:&quot;TestUser1 BNI&quot;,&quot;exchangeCurrency&quot;:null,&quot;DefaultCurrencyISO&quot;:&quot;IDR&quot;,&quot;RecordId&quot;:&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a&quot;,&quot;currencyConversionRate&quot;:null,&quot;Portfolios&quot;:[{&quot;PortfolioRecordId&quot;:&quot;15592359&quot;,&quot;PortfolioName&quot;:&quot;Manager Testing&quot;,&quot;PortfolioType&quot;:&quot;Portfolio&quot;,&quot;EffectiveRoot&quot;:{&quot;AncestorLevel&quot;:3,&quot;AncestorPortfolioRecordId&quot;:&quot;7887312&quot;,&quot;AncestorPortfolioName&quot;:&quot;TestPortfolio&quot;,&quot;AncestorCustomAttribute&quot;:{&quot;Integration&quot;:{&quot;ServicingSystem&quot;:&quot;NA&quot;,&quot;CLOOpportunity&quot;:false,&quot;Dynamics&quot;:false,&quot;IntelligentKnowledgeCenter&quot;:false,&quot;Salesforce&quot;:false},&quot;AppRegion&quot;:&quot;US&quot;,&quot;PrimaryCurrencyISO&quot;:&quot;USD&quot;,&quot;ApplicationWithdrawTimer&quot;:&quot;P5D&quot;,&quot;ApplicationREGBWaitTimer&quot;:&quot;P1D&quot;,&quot;CovenantLeadDays&quot;:90,&quot;TestAttribute&quot;:&quot;A1&quot;}}}]},&quot;DisplayDivisorLabel&quot;:&quot;(k)&quot;,&quot;candidateUserIds&quot;:&quot;TESTUSER1.BNI@CLO.COM,,,,,,&quot;,&quot;googleMapKey&quot;:&quot;AIzaSyAw1r9V3DrFm8QQvjzu8m6PFeq5gKQY27c&quot;,&quot;dealNumber&quot;:&quot;1204&quot;,&quot;Approval_TAE&quot;:0,&quot;name&quot;:&quot;Corporate Test Component | Deal No.BNI-GRP-B31E7E-1204&quot;,&quot;Collection&quot;:&quot;application&quot;,&quot;stageCollateralCount&quot;:0,&quot;taskName&quot;:&quot;&quot;,&quot;baseURL_FE_Omni&quot;:&quot;api/omniproxy&quot;,&quot;policyExceptionsCount&quot;:0,&quot;CommentsByRM&quot;:null,&quot;CRED_D007&quot;:[{&quot;RequiredStage&quot;:&quot;Application&quot;,&quot;Category_&quot;:&quot;Application Info.&quot;,&quot;DocumentStorageType&quot;:&quot;&quot;,&quot;AppliesTo&quot;:&quot;Application&quot;,&quot;Type_&quot;:&quot;Approved Call Memo&quot;,&quot;SystemGenerated&quot;:true}],&quot;DisplayDivisor&quot;:1000,&quot;isCancelledByCommittee&quot;:false,&quot;googleMapUrl&quot;:&quot;https://www.google.com/maps/embed/v1&quot;,&quot;facilityDocGen&quot;:false,&quot;applicationStartDate&quot;:&quot;2025-03-18&quot;,&quot;collateralCount&quot;:0,&quot;applicationEndDate&quot;:&quot;&quot;,&quot;Task_Permission_1&quot;:&quot;Task_Permission_1&quot;,&quot;PrimaryCurrencyISO&quot;:&quot;IDR&quot;,&quot;docCustomerId&quot;:null,&quot;creditDOB&quot;:{&quot;__definitionId&quot;:&quot;DOE-6b0c503a-03dd-11f0-bc6a-000d3a04bee4&quot;,&quot;__definitionKey&quot;:&quot;CRED_D005&quot;,&quot;ReferenceId&quot;:&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a&quot;,&quot;State&quot;:&quot;Application&quot;,&quot;Data&quot;:{&quot;name&quot;:&quot;Corporate Test Component | Deal No.BNI-GRP-B31E7E-1204&quot;,&quot;CustomerGroupName&quot;:&quot;Corporate Test Component&quot;,&quot;CustomerGroupNo&quot;:&quot;BNI-GRP-B31E7E&quot;,&quot;CustomerGroupRecordId&quot;:&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a&quot;,&quot;dealNumber&quot;:&quot;1204&quot;,&quot;TAE&quot;:0,&quot;caseId&quot;:&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4&quot;,&quot;assigneeId&quot;:&quot;TESTUSER1.BNI@CLO.COM&quot;,&quot;assigneeDisplayName&quot;:&quot;TestUser1 BNI&quot;,&quot;applicationType&quot;:&quot;Baru&quot;,&quot;targetCompletionDate&quot;:null,&quot;segment&quot;:&quot;Corporate&quot;,&quot;appRegion&quot;:&quot;US&quot;,&quot;PrimaryCurrencyISO&quot;:&quot;IDR&quot;,&quot;dealTeam&quot;:false,&quot;CreditAnalyst&quot;:&quot;&quot;,&quot;PortfolioManager&quot;:&quot;&quot;,&quot;CreditReviewer&quot;:&quot;&quot;,&quot;CreditReviewer2&quot;:&quot;&quot;,&quot;Syndications&quot;:&quot;&quot;,&quot;Legal&quot;:&quot;&quot;,&quot;ownerId&quot;:&quot;&quot;,&quot;appName&quot;:&quot;Corporate Test Component | Deal No.BNI-GRP-B31E7E-1204&quot;,&quot;policyExemptions&quot;:false,&quot;applicationRegion&quot;:&quot;US&quot;,&quot;LVR&quot;:0,&quot;currentTAE&quot;:0,&quot;regBStatus&quot;:&quot;&quot;,&quot;regBTimer&quot;:0,&quot;crmApplicationId&quot;:&quot;&quot;,&quot;crmApplicationName&quot;:&quot;Corporate Test Component new loan opportunity&quot;,&quot;enabledCRM&quot;:&quot;None&quot;,&quot;ManualDecision&quot;:&quot;&quot;,&quot;DeclineReason1&quot;:&quot;&quot;,&quot;DeclineReason2&quot;:&quot;&quot;,&quot;DeclineReason3&quot;:&quot;&quot;,&quot;CommentsByRM&quot;:&quot;&quot;,&quot;OtherDeclineComments&quot;:&quot;&quot;,&quot;IsRegB&quot;:false,&quot;ActionTaken&quot;:&quot;&quot;},&quot;Id&quot;:&quot;73ba6dd5-d3ef-4c1a-b25d-7d02a4dba5e6&quot;,&quot;__flowableVariableType&quot;:&quot;flowableDataObject&quot;},&quot;IssueDeclineLetterDocument&quot;:null,&quot;CustomerGroupNo&quot;:&quot;BNI-GRP-B31E7E&quot;,&quot;creditApplicationCaseId&quot;:&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4&quot;,&quot;approvalConditionCount&quot;:0,&quot;CustomerGroupName&quot;:&quot;Corporate Test Component&quot;,&quot;SyndicatedFacility&quot;:false,&quot;startUserId&quot;:&quot;TESTUSER1.BNI@CLO.COM&quot;,&quot;nextReviewDate&quot;:&quot;&quot;,&quot;WithdrawalComments&quot;:null,&quot;LELYes&quot;:false,&quot;creditReOpenCount&quot;:0,&quot;checklistTask1&quot;:&quot;TSK-bb24a0f8-03e1-11f0-bc6a-000d3a04bee4&quot;,&quot;applicationReferenceId&quot;:&quot;73ba6dd5-d3ef-4c1a-b25d-7d02a4dba5e6&quot;,&quot;startTime&quot;:&quot;2025-03-18T10:04:54.577Z&quot;,&quot;LELNo&quot;:false,&quot;isApproved&quot;:false,&quot;corpCredInitCompleted&quot;:true,&quot;isRejectedByCommittee&quot;:false,&quot;stageFacilityCount&quot;:0,&quot;owner&quot;:&quot;TESTUSER1.BNI@CLO.COM&quot;,&quot;googleApiKey&quot;:&quot;AIzaSyBtQIebvdI_GlLgavtqmySE-Iyn0vtNPv4&quot;,&quot;facilitiesCount&quot;:0,&quot;singleDocRequiredStage&quot;:null,&quot;errorMessage&quot;:null,&quot;CaseId&quot;:&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4&quot;,&quot;activationConditionCount&quot;:0,&quot;borrowerReviewList&quot;:[],&quot;OtherDeclineComments&quot;:null,&quot;assigneeId&quot;:&quot;TESTUSER1.BNI@CLO.COM&quot;,&quot;memoDocument&quot;:false,&quot;isWithdrawn&quot;:false,&quot;DeclineReason2&quot;:null,&quot;DeclineReason3&quot;:null,&quot;servicingSystem&quot;:&quot;NA&quot;,&quot;importTryCount&quot;:1,&quot;stages&quot;:[{&quot;stage&quot;:&quot;Application&quot;,&quot;status&quot;:&quot;1&quot;,&quot;stageStartDate&quot;:&quot;2025-03-18T10:04:56.760Z&quot;,&quot;stageEndDate&quot;:null},{&quot;stage&quot;:&quot;Underwriting&quot;,&quot;status&quot;:&quot;0&quot;,&quot;stageStartDate&quot;:null,&quot;stageEndDate&quot;:null},{&quot;stage&quot;:&quot;Credit Decisioning&quot;,&quot;status&quot;:&quot;0&quot;,&quot;stageStartDate&quot;:null,&quot;stageEndDate&quot;:null},{&quot;stage&quot;:&quot;Documentation&quot;,&quot;status&quot;:&quot;0&quot;,&quot;stageStartDate&quot;:null,&quot;stageEndDate&quot;:null},{&quot;stage&quot;:&quot;Closing&quot;,&quot;status&quot;:&quot;0&quot;,&quot;stageStartDate&quot;:null,&quot;stageEndDate&quot;:null}],&quot;FXRateSource&quot;:&quot;CLO&quot;,&quot;baseURL_FE&quot;:&quot;api/omniproxy&quot;,&quot;DeclineReason1&quot;:null,&quot;approvalLevel&quot;:&quot;&quot;,&quot;baseURL_BE&quot;:&quot;api/omniproxy&quot;},&quot;CustomerGroupRecordId&quot;:&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a&quot;,&quot;WithdrawalLetterDetails&quot;:null,&quot;initiator&quot;:&quot;TESTUSER1.BNI@CLO.COM&quot;,&quot;Regulatory&quot;:{&quot;US&quot;:&quot;false&quot;},&quot;covenantCount&quot;:0,&quot;baseURL_Optimist_FE&quot;:&quot;https://vwmazbnidevopt.dev.fiscloudservices.com/Optimist8_v4/&quot;,&quot;googleApiUrl&quot;:&quot;https://maps.googleapis.com/maps/api&quot;,&quot;DisplayPrecision&quot;:0,&quot;singleDocName&quot;:null,&quot;applicationStatus&quot;:&quot;In Progress&quot;,&quot;isDecisioned&quot;:false,&quot;notActivationCovenantCount&quot;:0,&quot;customerReOpenCount&quot;:0,&quot;isWithdrawnBttnDisabled&quot;:true,&quot;segment&quot;:&quot;Corporate&quot;,&quot;ManualDecision&quot;:null,&quot;GeneralActivity&quot;:true,&quot;conditionCount&quot;:0,&quot;createSingleDoc&quot;:false,&quot;flowablePayloadTime&quot;:&quot;2025-03-19 07:58:20&quot;,&quot;QATesting&quot;:false,&quot;dealSetupComplete&quot;:true,&quot;dealSetup&quot;:&quot;TSK-71ef9708-03e0-11f0-bc6a-000d3a04bee4&quot;,&quot;LegalEntityGroup&quot;:{&quot;Description&quot;:null,&quot;DefaultLanguage&quot;:&quot;English&quot;,&quot;ParentRecordId&quot;:null,&quot;ChildLegalEntityGroups&quot;:[],&quot;Comments&quot;:[{&quot;Id&quot;:&quot;2728720f-2b3f-4451-9e9b-076ed6e5dec2&quot;,&quot;EntityType&quot;:&quot;LegalEntityGroup&quot;,&quot;Type&quot;:&quot;Notes&quot;,&quot;Comment&quot;:null}],&quot;Users&quot;:[{&quot;Id&quot;:null,&quot;Type&quot;:&quot;Relationship Manager&quot;,&quot;RelationshipType&quot;:&quot;Primary&quot;,&quot;Description&quot;:&quot;TestUser1 BNI&quot;,&quot;UserEmailId&quot;:&quot;TESTUSER1.BNI@CLO.COM&quot;,&quot;Name&quot;:&quot;TestUser1 BNI&quot;}],&quot;LinkedLegalEntityGroupAliases&quot;:[],&quot;Name&quot;:&quot;Corporate Test Component&quot;,&quot;Type&quot;:&quot;Borrowing Group&quot;,&quot;ConfidentialHandlingFlag&quot;:false,&quot;ParentLegalEntityGroup&quot;:null,&quot;CustomerGroupID&quot;:&quot;BNI-GRP-B31E7E&quot;,&quot;LinkedLegalEntities&quot;:[{&quot;RecordId&quot;:&quot;06eb877b-db47-4736-8f5b-6149a04ceae3&quot;,&quot;Description&quot;:null,&quot;EntityStatus&quot;:null,&quot;InternalEntityType&quot;:&quot;Company&quot;,&quot;LegalForm&quot;:&quot;PT&quot;,&quot;CustomerID&quot;:&quot;BNI-CUS-E8C35A&quot;,&quot;pii_InternalRating&quot;:null,&quot;pii_InternalRatingDate&quot;:null,&quot;ShortName&quot;:&quot;Test 234 New&quot;,&quot;IndustryCode&quot;:null,&quot;IndustryDesc&quot;:null,&quot;pii_CreditScore&quot;:null,&quot;pii_CreditScoreDate&quot;:null,&quot;Title&quot;:null,&quot;FirstName&quot;:null,&quot;MiddleName&quot;:null,&quot;LastName&quot;:null,&quot;Suffix&quot;:null,&quot;FullName&quot;:&quot;Test 234 New&quot;,&quot;AssignedPrimaryPortfolio&quot;:&quot;Manager Testing&quot;,&quot;PortfolioOwner&quot;:null,&quot;RelationshipSince&quot;:null,&quot;pii_IDReference&quot;:null,&quot;MaritalStatus&quot;:null,&quot;pii_DateOfBirth&quot;:null,&quot;EmploymentStatus&quot;:null,&quot;CurrentEmployer&quot;:null,&quot;TypeOfBusiness&quot;:null,&quot;JobTitle&quot;:null,&quot;pii_IncomeEmployment&quot;:null,&quot;pii_IncomeOther&quot;:null,&quot;pii_IncomeTotal&quot;:null,&quot;IncorporationDate&quot;:null,&quot;ResolutionDate&quot;:null,&quot;NoOfSigners&quot;:null,&quot;NoOfEmployees&quot;:null,&quot;CurrentOwnershipDate&quot;:null,&quot;TotalSalesInd&quot;:null,&quot;TotalSalesDate&quot;:null,&quot;RegOType&quot;:null,&quot;PriorBankruptcyDate&quot;:null,&quot;OutstandingObligationAmount&quot;:null,&quot;pii_TrustName&quot;:null,&quot;OutOfMarketFinancing&quot;:null,&quot;LastReviewDate&quot;:null,&quot;NextReviewDate&quot;:null,&quot;LEI&quot;:null,&quot;EntityType&quot;:&quot;Company&quot;,&quot;RegulatoryEntityType&quot;:null,&quot;TradingFlag&quot;:null,&quot;Gender&quot;:null,&quot;Spouse&quot;:null,&quot;NoOfDependents&quot;:null,&quot;ReviewFrequency&quot;:null,&quot;TotalSalesGroup&quot;:null,&quot;TotalSalesGroupCurrencyISO&quot;:null,&quot;TotalSalesIndCurrencyISO&quot;:null,&quot;TotalAssetsGroup&quot;:null,&quot;TotalAssetsGroupCurrencyISO&quot;:null,&quot;TotalAssetsInd&quot;:null,&quot;TotalAssetsDate&quot;:null,&quot;TotalAssetsIndCurrencyISO&quot;:null,&quot;RegulatedFlag&quot;:null,&quot;FinancialEntityFlag&quot;:null,&quot;RegulatoryCCRFlag&quot;:null,&quot;RegulatoryCRFlag&quot;:null,&quot;RegulatoryCVAFlag&quot;:null,&quot;BusinessStatus&quot;:null,&quot;BusinessStatusDate&quot;:null,&quot;SovereignTreatmentFlag&quot;:null,&quot;QualifiedCCPFlag&quot;:null,&quot;SMEFlag&quot;:null,&quot;QualifiedMDBFlag&quot;:null,&quot;EquityScalingFlag&quot;:null,&quot;OverrideRiskWeight&quot;:null,&quot;IdiosyncraticWeight&quot;:null,&quot;LegalJurisdiction&quot;:null,&quot;RegulatoryJurisdiction&quot;:null,&quot;InstitutionalProtectionFlag&quot;:null,&quot;DefunctDate&quot;:null,&quot;pii_PrimaryIdentifier&quot;:&quot;123456789009811&quot;,&quot;pii_PrimaryIdentifierType&quot;:null,&quot;pii_PrimaryIDDateOfIssue&quot;:null,&quot;pii_PrimaryIDDateOfExpiration&quot;:null,&quot;DBA&quot;:null,&quot;EmploymentSince&quot;:null,&quot;OutstandingObligationAmountCurrencyISO&quot;:null,&quot;OutstandingObligationDate&quot;:null,&quot;OOMarketFlag&quot;:null,&quot;CustomerClassification&quot;:null,&quot;Website&quot;:null,&quot;pii_Race&quot;:null,&quot;pii_Ethnicity&quot;:null,&quot;CitizenshipStatus&quot;:null,&quot;FATCAStatus&quot;:null,&quot;FATCACompliant&quot;:null,&quot;ConfidentialHandlingFlag&quot;:null,&quot;InternalCustomerFlag&quot;:null,&quot;DefaultLanguage&quot;:null,&quot;SecondaryIDType&quot;:null,&quot;pii_SecondaryIDReference&quot;:null,&quot;SecondaryIDDateOfIssue&quot;:null,&quot;SecondaryIDDateOfExpiration&quot;:null,&quot;pii_PhoneNumber1&quot;:null,&quot;pii_ExtensionNumber1&quot;:null,&quot;PhoneType1&quot;:null,&quot;pii_PhoneNumber2&quot;:null,&quot;pii_ExtensionNumber2&quot;:null,&quot;PhoneType2&quot;:null,&quot;pii_EmailAddress&quot;:null,&quot;pii_FaxNumber&quot;:null,&quot;RegOFlag&quot;:null,&quot;PriorBankruptcyFlag&quot;:null,&quot;OutstandingLiensFlag&quot;:null,&quot;PersonalTrustFlag&quot;:null,&quot;PrimaryContact&quot;:null,&quot;ReviewFrequencyType&quot;:null,&quot;EmployerAddress&quot;:null,&quot;EmployerCity&quot;:null,&quot;EmployerStateProvince&quot;:null,&quot;EmployerPostalCode&quot;:null,&quot;pii_CurrentAddress&quot;:null,&quot;pii_CurrentAddressCity&quot;:null,&quot;pii_CurrentAddressStateProvince&quot;:null,&quot;pii_CurrentAddressPostalCode&quot;:null,&quot;pii_SecondaryAddress&quot;:null,&quot;pii_SecondaryAddressCity&quot;:null,&quot;pii_SecondaryAddressStateProvince&quot;:null,&quot;pii_SecondaryAddressPostalCode&quot;:null,&quot;DefaultGLUnit&quot;:null,&quot;ServicingUnit&quot;:null,&quot;pii_DefaultInboundBankAddress&quot;:null,&quot;pii_DefaultInboundBankCity&quot;:null,&quot;pii_DefaultInboundBankStateProvince&quot;:null,&quot;pii_DefaultInboundBankPostalCode&quot;:null,&quot;pii_DefaultInboundBankCountry&quot;:null,&quot;pii_DefaultInboundABATransitNumber&quot;:null,&quot;pii_DefaultInboundBankAccountType&quot;:null,&quot;pii_DefaultInboundBankAccountName&quot;:null,&quot;pii_DefaultInboundBankAccountNumber&quot;:null,&quot;pii_DefaultInboundBankContact&quot;:null,&quot;pii_DefaultInboundBankName&quot;:null,&quot;pii_DefaultInboundBankContactPhoneNumber&quot;:null,&quot;pii_DefaultInboundBankFaxNumber&quot;:null,&quot;pii_DefaultInboundBankBranchName&quot;:null,&quot;pii_DefaultOutboundBankAddress&quot;:null,&quot;pii_DefaultOutboundBankCity&quot;:null,&quot;pii_DefaultOutboundBankStateProvince&quot;:null,&quot;pii_DefaultOutboundBankPostalCode&quot;:null,&quot;pii_DefaultOutboundBankCountry&quot;:null,&quot;pii_DefaultOutboundABATransitNumber&quot;:null,&quot;pii_DefaultOutboundBankAccountType&quot;:null,&quot;pii_DefaultOutboundBankAccountName&quot;:null,&quot;pii_DefaultOutboundBankAccountNumber&quot;:null,&quot;pii_DefaultOutboundBankContact&quot;:null,&quot;pii_DefaultOutboundBankName&quot;:null,&quot;pii_DefaultOutboundBankContactPhoneNumber&quot;:null,&quot;pii_DefaultOutboundBankFaxNumber&quot;:null,&quot;pii_DefaultOutboundBankBranchName&quot;:null,&quot;pii_CurrentAddressCountry&quot;:null,&quot;CurrentAddressType&quot;:null,&quot;pii_SecondaryAddressCountry&quot;:null,&quot;SecondaryAddressType&quot;:null,&quot;TaxStatus&quot;:null,&quot;pii_SecondaryAddressCounty&quot;:null,&quot;pii_CurrentAddressCounty&quot;:null,&quot;InternalEntityTypeCode&quot;:null,&quot;ConfidentialHandling&quot;:null,&quot;InternalCustomer&quot;:null,&quot;ApprovedDirectLiabilityLimit&quot;:null,&quot;ApprovedTotalLiabilityLimit&quot;:null,&quot;LimitsApprovedDate&quot;:null,&quot;DefaultInboundPaymentCurrencyType&quot;:null,&quot;DefaultOutboundPaymentCurrencyType&quot;:null,&quot;DefaultInboundPaymentCode&quot;:null,&quot;DefaultOutboundPaymentCode&quot;:null,&quot;DefaultInboundPaymentSpecialInstructions&quot;:null,&quot;DefaultOutboundPaymentSpecialInstructions&quot;:null,&quot;pii_PreviousAddressCountry&quot;:null,&quot;PreviousAddressType&quot;:null,&quot;CurrentAddressSince&quot;:null,&quot;PreviousAddressSince&quot;:null,&quot;SecondaryAddressSince&quot;:null,&quot;ServicingUnitSection&quot;:null,&quot;InvestorIndicator&quot;:null,&quot;PDValue&quot;:null,&quot;LGDValue&quot;:null,&quot;CurrentAddressIdentifier&quot;:null,&quot;CurrentAddressName1&quot;:null,&quot;SecondaryAddressIdentifier&quot;:null,&quot;SecondaryAddressName1&quot;:null,&quot;DefaultInboundCashOffsetType&quot;:null,&quot;DefaultOutboundCashOffsetType&quot;:null,&quot;DefaultInboundSwiftIdentifier&quot;:null,&quot;DefaultOutboundSwiftIdentifier&quot;:null,&quot;ExternalRatingType&quot;:null,&quot;FullName2&quot;:null,&quot;FullName3&quot;:null,&quot;SortName&quot;:null,&quot;DefaultCurrencyType&quot;:null,&quot;WatchStatusIndicator&quot;:null,&quot;TotalGuarantees&quot;:null,&quot;WatchListDate&quot;:null,&quot;DispositionType&quot;:null,&quot;PublishedName&quot;:null,&quot;BorrowerIndicatorFlag&quot;:null,&quot;WatchListReason&quot;:null,&quot;CurrentAddressName2&quot;:null,&quot;CurrentAddressName3&quot;:null,&quot;pii_CurrentAddress2&quot;:null,&quot;pii_CurrentAddress3&quot;:null,&quot;pii_CurrentAddress4&quot;:null,&quot;pii_CurrentAddressTelexNumber&quot;:null,&quot;pii_CurrentAddressSwiftIdentifier&quot;:null,&quot;SecurityDesignation&quot;:null,&quot;SecondaryAddressName2&quot;:null,&quot;SecondaryAddressName3&quot;:null,&quot;pii_SecondaryAddress2&quot;:null,&quot;pii_SecondaryAddress3&quot;:null,&quot;pii_SecondaryAddress4&quot;:null,&quot;pii_SecondaryAddressPhone1&quot;:null,&quot;pii_SecondaryAddressPhone2&quot;:null,&quot;pii_SecondaryAddressFaxNumber&quot;:null,&quot;pii_SecondaryAddressTelexNumber&quot;:null,&quot;pii_SecondaryAddressSwiftIdentifier&quot;:null,&quot;pii_SecondaryAddressEmailAddress&quot;:null,&quot;InternalOrganisation&quot;:null,&quot;LinkedBackgroundReports&quot;:[],&quot;LinkedLegalEntityAliases&quot;:[],&quot;Comments&quot;:[],&quot;CountrySubRegions&quot;:[],&quot;Locations&quot;:[],&quot;Users&quot;:[],&quot;LinkedRelationships&quot;:[],&quot;Industries&quot;:[],&quot;Contacts&quot;:[],&quot;CountryOfIncorpOrResidence&quot;:&quot;Indonesia&quot;,&quot;BusinessEntityType&quot;:null,&quot;DoingBusinessAs&quot;:null,&quot;CustomerSegment&quot;:&quot;Corporate&quot;,&quot;LMSID&quot;:null,&quot;customerQuadrant&quot;:null,&quot;portfolioNeeded&quot;:null,&quot;customerRemarks&quot;:null,&quot;LinkedPortfolios&quot;:[{&quot;LegalEntityRecordId&quot;:&quot;06eb877b-db47-4736-8f5b-6149a04ceae3&quot;,&quot;PortfolioRecordId&quot;:&quot;15592359&quot;,&quot;RelationshipType&quot;:&quot;Primary Portfolio&quot;,&quot;PortfolioDataSource&quot;:null,&quot;LegalEntityDataSource&quot;:null,&quot;PortfolioName&quot;:&quot;Manager Testing&quot;,&quot;PortfolioType&quot;:&quot;Portfolio&quot;,&quot;PortfolioDescription&quot;:&quot;Sample Portfolio&quot;,&quot;EffectiveRoot&quot;:{&quot;AncestorLevel&quot;:3,&quot;AncestorPortfolioRecordId&quot;:&quot;7887312&quot;,&quot;AncestorPortfolioName&quot;:&quot;TestPortfolio&quot;,&quot;AncestorCustomAttribute&quot;:{&quot;Integration&quot;:{&quot;ServicingSystem&quot;:&quot;NA&quot;,&quot;CLOOpportunity&quot;:false,&quot;Dynamics&quot;:false,&quot;IntelligentKnowledgeCenter&quot;:false,&quot;Salesforce&quot;:false},&quot;AppRegion&quot;:&quot;US&quot;,&quot;PrimaryCurrencyISO&quot;:&quot;USD&quot;,&quot;ApplicationWithdrawTimer&quot;:&quot;P5D&quot;,&quot;ApplicationREGBWaitTimer&quot;:&quot;P1D&quot;,&quot;CovenantLeadDays&quot;:90,&quot;TestAttribute&quot;:&quot;A1&quot;}}}]}],&quot;exchangeRateDate&quot;:null,&quot;segment&quot;:&quot;Corporate&quot;,&quot;PortfolioOwner&quot;:&quot;TestUser1 BNI&quot;,&quot;exchangeCurrency&quot;:null,&quot;DefaultCurrencyISO&quot;:&quot;IDR&quot;,&quot;RecordId&quot;:&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a&quot;,&quot;currencyConversionRate&quot;:null,&quot;Portfolios&quot;:[{&quot;PortfolioRecordId&quot;:&quot;15592359&quot;,&quot;PortfolioName&quot;:&quot;Manager Testing&quot;,&quot;PortfolioType&quot;:&quot;Portfolio&quot;,&quot;EffectiveRoot&quot;:{&quot;AncestorLevel&quot;:3,&quot;AncestorPortfolioRecordId&quot;:&quot;7887312&quot;,&quot;AncestorPortfolioName&quot;:&quot;TestPortfolio&quot;,&quot;AncestorCustomAttribute&quot;:{&quot;Integration&quot;:{&quot;ServicingSystem&quot;:&quot;NA&quot;,&quot;CLOOpportunity&quot;:false,&quot;Dynamics&quot;:false,&quot;IntelligentKnowledgeCenter&quot;:false,&quot;Salesforce&quot;:false},&quot;AppRegion&quot;:&quot;US&quot;,&quot;PrimaryCurrencyISO&quot;:&quot;USD&quot;,&quot;ApplicationWithdrawTimer&quot;:&quot;P5D&quot;,&quot;ApplicationREGBWaitTimer&quot;:&quot;P1D&quot;,&quot;CovenantLeadDays&quot;:90,&quot;TestAttribute&quot;:&quot;A1&quot;}}}]},&quot;DisplayDivisorLabel&quot;:&quot;(k)&quot;,&quot;candidateUserIds&quot;:&quot;TESTUSER1.BNI@CLO.COM,,,,,,&quot;,&quot;task&quot;:{&quot;scopeId&quot;:&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4&quot;,&quot;subScopeId&quot;:&quot;CAS-71ecfeaf-03e0-11f0-bc6a-000d3a04bee4&quot;,&quot;createTime&quot;:&quot;2025-03-18T10:04:56.760Z&quot;,&quot;formKey&quot;:&quot;CRED_F511_BNI&quot;,&quot;scopeType&quot;:&quot;cmmn&quot;,&quot;name&quot;:&quot;Test UAM&quot;,&quot;id&quot;:&quot;TSK-71efe52f-03e0-11f0-bc6a-000d3a04bee4&quot;,&quot;assignee&quot;:&quot;TESTUSER1.BNI@CLO.COM&quot;,&quot;priority&quot;:50},&quot;googleMapKey&quot;:&quot;AIzaSyAw1r9V3DrFm8QQvjzu8m6PFeq5gKQY27c&quot;,&quot;dealNumber&quot;:&quot;1204&quot;,&quot;Approval_TAE&quot;:0,&quot;name&quot;:&quot;Corporate Test Component | Deal No.BNI-GRP-B31E7E-1204&quot;,&quot;Collection&quot;:&quot;application&quot;,&quot;stageCollateralCount&quot;:0,&quot;taskName&quot;:&quot;&quot;,&quot;baseURL_FE_Omni&quot;:&quot;api/omniproxy&quot;,&quot;policyExceptionsCount&quot;:0,&quot;CommentsByRM&quot;:null,&quot;CRED_D007&quot;:[{&quot;RequiredStage&quot;:&quot;Application&quot;,&quot;Category_&quot;:&quot;Application Info.&quot;,&quot;DocumentStorageType&quot;:&quot;&quot;,&quot;AppliesTo&quot;:&quot;Application&quot;,&quot;Type_&quot;:&quot;Approved Call Memo&quot;,&quot;SystemGenerated&quot;:true}],&quot;DisplayDivisor&quot;:1000,&quot;isCancelledByCommittee&quot;:false,&quot;googleMapUrl&quot;:&quot;https://www.google.com/maps/embed/v1&quot;,&quot;facilityDocGen&quot;:false,&quot;applicationStartDate&quot;:&quot;2025-03-18&quot;,&quot;collateralCount&quot;:0,&quot;applicationEndDate&quot;:&quot;&quot;,&quot;Task_Permission_1&quot;:&quot;Task_Permission_1&quot;,&quot;PrimaryCurrencyISO&quot;:&quot;IDR&quot;,&quot;docCustomerId&quot;:null,&quot;flowableDatabasePayload&quot;:&quot;{\&quot;exception\&quot;:null,\&quot;parent\&quot;:{\&quot;exception\&quot;:null,\&quot;CustomerGroupRecordId\&quot;:\&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a\&quot;,\&quot;WithdrawalLetterDetails\&quot;:null,\&quot;initiator\&quot;:\&quot;TESTUSER1.BNI@CLO.COM\&quot;,\&quot;Regulatory\&quot;:{\&quot;US\&quot;:\&quot;false\&quot;},\&quot;covenantCount\&quot;:0,\&quot;baseURL_Optimist_FE\&quot;:\&quot;https://vwmazbnidevopt.dev.fiscloudservices.com/Optimist8_v4/\&quot;,\&quot;googleApiUrl\&quot;:\&quot;https://maps.googleapis.com/maps/api\&quot;,\&quot;DisplayPrecision\&quot;:0,\&quot;singleDocName\&quot;:null,\&quot;applicationStatus\&quot;:\&quot;In Progress\&quot;,\&quot;isDecisioned\&quot;:false,\&quot;notActivationCovenantCount\&quot;:0,\&quot;customerReOpenCount\&quot;:0,\&quot;isWithdrawnBttnDisabled\&quot;:true,\&quot;segment\&quot;:\&quot;Corporate\&quot;,\&quot;ManualDecision\&quot;:null,\&quot;GeneralActivity\&quot;:true,\&quot;id\&quot;:\&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4\&quot;,\&quot;conditionCount\&quot;:0,\&quot;createSingleDoc\&quot;:false,\&quot;QATesting\&quot;:false,\&quot;dealSetupComplete\&quot;:true,\&quot;dealSetup\&quot;:\&quot;TSK-71ef9708-03e0-11f0-bc6a-000d3a04bee4\&quot;,\&quot;LegalEntityGroup\&quot;:{\&quot;Description\&quot;:null,\&quot;DefaultLanguage\&quot;:\&quot;English\&quot;,\&quot;ParentRecordId\&quot;:null,\&quot;ChildLegalEntityGroups\&quot;:[],\&quot;Comments\&quot;:[{\&quot;Id\&quot;:\&quot;2728720f-2b3f-4451-9e9b-076ed6e5dec2\&quot;,\&quot;EntityType\&quot;:\&quot;LegalEntityGroup\&quot;,\&quot;Type\&quot;:\&quot;Notes\&quot;,\&quot;Comment\&quot;:null}],\&quot;Users\&quot;:[{\&quot;Id\&quot;:null,\&quot;Type\&quot;:\&quot;Relationship Manager\&quot;,\&quot;RelationshipType\&quot;:\&quot;Primary\&quot;,\&quot;Description\&quot;:\&quot;TestUser1 BNI\&quot;,\&quot;UserEmailId\&quot;:\&quot;TESTUSER1.BNI@CLO.COM\&quot;,\&quot;Name\&quot;:\&quot;TestUser1 BNI\&quot;}],\&quot;LinkedLegalEntityGroupAliases\&quot;:[],\&quot;Name\&quot;:\&quot;Corporate Test Component\&quot;,\&quot;Type\&quot;:\&quot;Borrowing Group\&quot;,\&quot;ConfidentialHandlingFlag\&quot;:false,\&quot;ParentLegalEntityGroup\&quot;:null,\&quot;CustomerGroupID\&quot;:\&quot;BNI-GRP-B31E7E\&quot;,\&quot;LinkedLegalEntities\&quot;:[{\&quot;RecordId\&quot;:\&quot;06eb877b-db47-4736-8f5b-6149a04ceae3\&quot;,\&quot;Description\&quot;:null,\&quot;EntityStatus\&quot;:null,\&quot;InternalEntityType\&quot;:\&quot;Company\&quot;,\&quot;LegalForm\&quot;:\&quot;PT\&quot;,\&quot;CustomerID\&quot;:\&quot;BNI-CUS-E8C35A\&quot;,\&quot;pii_InternalRating\&quot;:null,\&quot;pii_InternalRatingDate\&quot;:null,\&quot;ShortName\&quot;:\&quot;Test 234 New\&quot;,\&quot;IndustryCode\&quot;:null,\&quot;IndustryDesc\&quot;:null,\&quot;pii_CreditScore\&quot;:null,\&quot;pii_CreditScoreDate\&quot;:null,\&quot;Title\&quot;:null,\&quot;FirstName\&quot;:null,\&quot;MiddleName\&quot;:null,\&quot;LastName\&quot;:null,\&quot;Suffix\&quot;:null,\&quot;FullName\&quot;:\&quot;Test 234 New\&quot;,\&quot;AssignedPrimaryPortfolio\&quot;:\&quot;Manager Testing\&quot;,\&quot;PortfolioOwner\&quot;:null,\&quot;RelationshipSince\&quot;:null,\&quot;pii_IDReference\&quot;:null,\&quot;MaritalStatus\&quot;:null,\&quot;pii_DateOfBirth\&quot;:null,\&quot;EmploymentStatus\&quot;:null,\&quot;CurrentEmployer\&quot;:null,\&quot;TypeOfBusiness\&quot;:null,\&quot;JobTitle\&quot;:null,\&quot;pii_IncomeEmployment\&quot;:null,\&quot;pii_IncomeOther\&quot;:null,\&quot;pii_IncomeTotal\&quot;:null,\&quot;IncorporationDate\&quot;:null,\&quot;ResolutionDate\&quot;:null,\&quot;NoOfSigners\&quot;:null,\&quot;NoOfEmployees\&quot;:null,\&quot;CurrentOwnershipDate\&quot;:null,\&quot;TotalSalesInd\&quot;:null,\&quot;TotalSalesDate\&quot;:null,\&quot;RegOType\&quot;:null,\&quot;PriorBankruptcyDate\&quot;:null,\&quot;OutstandingObligationAmount\&quot;:null,\&quot;pii_TrustName\&quot;:null,\&quot;OutOfMarketFinancing\&quot;:null,\&quot;LastReviewDate\&quot;:null,\&quot;NextReviewDate\&quot;:null,\&quot;LEI\&quot;:null,\&quot;EntityType\&quot;:\&quot;Company\&quot;,\&quot;RegulatoryEntityType\&quot;:null,\&quot;TradingFlag\&quot;:null,\&quot;Gender\&quot;:null,\&quot;Spouse\&quot;:null,\&quot;NoOfDependents\&quot;:null,\&quot;ReviewFrequency\&quot;:null,\&quot;TotalSalesGroup\&quot;:null,\&quot;TotalSalesGroupCurrencyISO\&quot;:null,\&quot;TotalSalesIndCurrencyISO\&quot;:null,\&quot;TotalAssetsGroup\&quot;:null,\&quot;TotalAssetsGroupCurrencyISO\&quot;:null,\&quot;TotalAssetsInd\&quot;:null,\&quot;TotalAssetsDate\&quot;:null,\&quot;TotalAssetsIndCurrencyISO\&quot;:null,\&quot;RegulatedFlag\&quot;:null,\&quot;FinancialEntityFlag\&quot;:null,\&quot;RegulatoryCCRFlag\&quot;:null,\&quot;RegulatoryCRFlag\&quot;:null,\&quot;RegulatoryCVAFlag\&quot;:null,\&quot;BusinessStatus\&quot;:null,\&quot;BusinessStatusDate\&quot;:null,\&quot;SovereignTreatmentFlag\&quot;:null,\&quot;QualifiedCCPFlag\&quot;:null,\&quot;SMEFlag\&quot;:null,\&quot;QualifiedMDBFlag\&quot;:null,\&quot;EquityScalingFlag\&quot;:null,\&quot;OverrideRiskWeight\&quot;:null,\&quot;IdiosyncraticWeight\&quot;:null,\&quot;LegalJurisdiction\&quot;:null,\&quot;RegulatoryJurisdiction\&quot;:null,\&quot;InstitutionalProtectionFlag\&quot;:null,\&quot;DefunctDate\&quot;:null,\&quot;pii_PrimaryIdentifier\&quot;:\&quot;123456789009811\&quot;,\&quot;pii_PrimaryIdentifierType\&quot;:null,\&quot;pii_PrimaryIDDateOfIssue\&quot;:null,\&quot;pii_PrimaryIDDateOfExpiration\&quot;:null,\&quot;DBA\&quot;:null,\&quot;EmploymentSince\&quot;:null,\&quot;OutstandingObligationAmountCurrencyISO\&quot;:null,\&quot;OutstandingObligationDate\&quot;:null,\&quot;OOMarketFlag\&quot;:null,\&quot;CustomerClassification\&quot;:null,\&quot;Website\&quot;:null,\&quot;pii_Race\&quot;:null,\&quot;pii_Ethnicity\&quot;:null,\&quot;CitizenshipStatus\&quot;:null,\&quot;FATCAStatus\&quot;:null,\&quot;FATCACompliant\&quot;:null,\&quot;ConfidentialHandlingFlag\&quot;:null,\&quot;InternalCustomerFlag\&quot;:null,\&quot;DefaultLanguage\&quot;:null,\&quot;SecondaryIDType\&quot;:null,\&quot;pii_SecondaryIDReference\&quot;:null,\&quot;SecondaryIDDateOfIssue\&quot;:null,\&quot;SecondaryIDDateOfExpiration\&quot;:null,\&quot;pii_PhoneNumber1\&quot;:null,\&quot;pii_ExtensionNumber1\&quot;:null,\&quot;PhoneType1\&quot;:null,\&quot;pii_PhoneNumber2\&quot;:null,\&quot;pii_ExtensionNumber2\&quot;:null,\&quot;PhoneType2\&quot;:null,\&quot;pii_EmailAddress\&quot;:null,\&quot;pii_FaxNumber\&quot;:null,\&quot;RegOFlag\&quot;:null,\&quot;PriorBankruptcyFlag\&quot;:null,\&quot;OutstandingLiensFlag\&quot;:null,\&quot;PersonalTrustFlag\&quot;:null,\&quot;PrimaryContact\&quot;:null,\&quot;ReviewFrequencyType\&quot;:null,\&quot;EmployerAddress\&quot;:null,\&quot;EmployerCity\&quot;:null,\&quot;EmployerStateProvince\&quot;:null,\&quot;EmployerPostalCode\&quot;:null,\&quot;pii_CurrentAddress\&quot;:null,\&quot;pii_CurrentAddressCity\&quot;:null,\&quot;pii_CurrentAddressStateProvince\&quot;:null,\&quot;pii_CurrentAddressPostalCode\&quot;:null,\&quot;pii_SecondaryAddress\&quot;:null,\&quot;pii_SecondaryAddressCity\&quot;:null,\&quot;pii_SecondaryAddressStateProvince\&quot;:null,\&quot;pii_SecondaryAddressPostalCode\&quot;:null,\&quot;DefaultGLUnit\&quot;:null,\&quot;ServicingUnit\&quot;:null,\&quot;pii_DefaultInboundBankAddress\&quot;:null,\&quot;pii_DefaultInboundBankCity\&quot;:null,\&quot;pii_DefaultInboundBankStateProvince\&quot;:null,\&quot;pii_DefaultInboundBankPostalCode\&quot;:null,\&quot;pii_DefaultInboundBankCountry\&quot;:null,\&quot;pii_DefaultInboundABATransitNumber\&quot;:null,\&quot;pii_DefaultInboundBankAccountType\&quot;:null,\&quot;pii_DefaultInboundBankAccountName\&quot;:null,\&quot;pii_DefaultInboundBankAccountNumber\&quot;:null,\&quot;pii_DefaultInboundBankContact\&quot;:null,\&quot;pii_DefaultInboundBankName\&quot;:null,\&quot;pii_DefaultInboundBankContactPhoneNumber\&quot;:null,\&quot;pii_DefaultInboundBankFaxNumber\&quot;:null,\&quot;pii_DefaultInboundBankBranchName\&quot;:null,\&quot;pii_DefaultOutboundBankAddress\&quot;:null,\&quot;pii_DefaultOutboundBankCity\&quot;:null,\&quot;pii_DefaultOutboundBankStateProvince\&quot;:null,\&quot;pii_DefaultOutboundBankPostalCode\&quot;:null,\&quot;pii_DefaultOutboundBankCountry\&quot;:null,\&quot;pii_DefaultOutboundABATransitNumber\&quot;:null,\&quot;pii_DefaultOutboundBankAccountType\&quot;:null,\&quot;pii_DefaultOutboundBankAccountName\&quot;:null,\&quot;pii_DefaultOutboundBankAccountNumber\&quot;:null,\&quot;pii_DefaultOutboundBankContact\&quot;:null,\&quot;pii_DefaultOutboundBankName\&quot;:null,\&quot;pii_DefaultOutboundBankContactPhoneNumber\&quot;:null,\&quot;pii_DefaultOutboundBankFaxNumber\&quot;:null,\&quot;pii_DefaultOutboundBankBranchName\&quot;:null,\&quot;pii_CurrentAddressCountry\&quot;:null,\&quot;CurrentAddressType\&quot;:null,\&quot;pii_SecondaryAddressCountry\&quot;:null,\&quot;SecondaryAddressType\&quot;:null,\&quot;TaxStatus\&quot;:null,\&quot;pii_SecondaryAddressCounty\&quot;:null,\&quot;pii_CurrentAddressCounty\&quot;:null,\&quot;InternalEntityTypeCode\&quot;:null,\&quot;ConfidentialHandling\&quot;:null,\&quot;InternalCustomer\&quot;:null,\&quot;ApprovedDirectLiabilityLimit\&quot;:null,\&quot;ApprovedTotalLiabilityLimit\&quot;:null,\&quot;LimitsApprovedDate\&quot;:null,\&quot;DefaultInboundPaymentCurrencyType\&quot;:null,\&quot;DefaultOutboundPaymentCurrencyType\&quot;:null,\&quot;DefaultInboundPaymentCode\&quot;:null,\&quot;DefaultOutboundPaymentCode\&quot;:null,\&quot;DefaultInboundPaymentSpecialInstructions\&quot;:null,\&quot;DefaultOutboundPaymentSpecialInstructions\&quot;:null,\&quot;pii_PreviousAddressCountry\&quot;:null,\&quot;PreviousAddressType\&quot;:null,\&quot;CurrentAddressSince\&quot;:null,\&quot;PreviousAddressSince\&quot;:null,\&quot;SecondaryAddressSince\&quot;:null,\&quot;ServicingUnitSection\&quot;:null,\&quot;InvestorIndicator\&quot;:null,\&quot;PDValue\&quot;:null,\&quot;LGDValue\&quot;:null,\&quot;CurrentAddressIdentifier\&quot;:null,\&quot;CurrentAddressName1\&quot;:null,\&quot;SecondaryAddressIdentifier\&quot;:null,\&quot;SecondaryAddressName1\&quot;:null,\&quot;DefaultInboundCashOffsetType\&quot;:null,\&quot;DefaultOutboundCashOffsetType\&quot;:null,\&quot;DefaultInboundSwiftIdentifier\&quot;:null,\&quot;DefaultOutboundSwiftIdentifier\&quot;:null,\&quot;ExternalRatingType\&quot;:null,\&quot;FullName2\&quot;:null,\&quot;FullName3\&quot;:null,\&quot;SortName\&quot;:null,\&quot;DefaultCurrencyType\&quot;:null,\&quot;WatchStatusIndicator\&quot;:null,\&quot;TotalGuarantees\&quot;:null,\&quot;WatchListDate\&quot;:null,\&quot;DispositionType\&quot;:null,\&quot;PublishedName\&quot;:null,\&quot;BorrowerIndicatorFlag\&quot;:null,\&quot;WatchListReason\&quot;:null,\&quot;CurrentAddressName2\&quot;:null,\&quot;CurrentAddressName3\&quot;:null,\&quot;pii_CurrentAddress2\&quot;:null,\&quot;pii_CurrentAddress3\&quot;:null,\&quot;pii_CurrentAddress4\&quot;:null,\&quot;pii_CurrentAddressTelexNumber\&quot;:null,\&quot;pii_CurrentAddressSwiftIdentifier\&quot;:null,\&quot;SecurityDesignation\&quot;:null,\&quot;SecondaryAddressName2\&quot;:null,\&quot;SecondaryAddressName3\&quot;:null,\&quot;pii_SecondaryAddress2\&quot;:null,\&quot;pii_SecondaryAddress3\&quot;:null,\&quot;pii_SecondaryAddress4\&quot;:null,\&quot;pii_SecondaryAddressPhone1\&quot;:null,\&quot;pii_SecondaryAddressPhone2\&quot;:null,\&quot;pii_SecondaryAddressFaxNumber\&quot;:null,\&quot;pii_SecondaryAddressTelexNumber\&quot;:null,\&quot;pii_SecondaryAddressSwiftIdentifier\&quot;:null,\&quot;pii_SecondaryAddressEmailAddress\&quot;:null,\&quot;InternalOrganisation\&quot;:null,\&quot;LinkedBackgroundReports\&quot;:[],\&quot;LinkedLegalEntityAliases\&quot;:[],\&quot;Comments\&quot;:[],\&quot;CountrySubRegions\&quot;:[],\&quot;Locations\&quot;:[],\&quot;Users\&quot;:[],\&quot;LinkedRelationships\&quot;:[],\&quot;Industries\&quot;:[],\&quot;Contacts\&quot;:[],\&quot;CountryOfIncorpOrResidence\&quot;:\&quot;Indonesia\&quot;,\&quot;BusinessEntityType\&quot;:null,\&quot;DoingBusinessAs\&quot;:null,\&quot;CustomerSegment\&quot;:\&quot;Corporate\&quot;,\&quot;LMSID\&quot;:null,\&quot;customerQuadrant\&quot;:null,\&quot;portfolioNeeded\&quot;:null,\&quot;customerRemarks\&quot;:null,\&quot;LinkedPortfolios\&quot;:[{\&quot;LegalEntityRecordId\&quot;:\&quot;06eb877b-db47-4736-8f5b-6149a04ceae3\&quot;,\&quot;PortfolioRecordId\&quot;:\&quot;15592359\&quot;,\&quot;RelationshipType\&quot;:\&quot;Primary Portfolio\&quot;,\&quot;PortfolioDataSource\&quot;:null,\&quot;LegalEntityDataSource\&quot;:null,\&quot;PortfolioName\&quot;:\&quot;Manager Testing\&quot;,\&quot;PortfolioType\&quot;:\&quot;Portfolio\&quot;,\&quot;PortfolioDescription\&quot;:\&quot;Sample Portfolio\&quot;,\&quot;EffectiveRoot\&quot;:{\&quot;AncestorLevel\&quot;:3,\&quot;AncestorPortfolioRecordId\&quot;:\&quot;7887312\&quot;,\&quot;AncestorPortfolioName\&quot;:\&quot;TestPortfolio\&quot;,\&quot;AncestorCustomAttribute\&quot;:{\&quot;Integration\&quot;:{\&quot;ServicingSystem\&quot;:\&quot;NA\&quot;,\&quot;CLOOpportunity\&quot;:false,\&quot;Dynamics\&quot;:false,\&quot;IntelligentKnowledgeCenter\&quot;:false,\&quot;Salesforce\&quot;:false},\&quot;AppRegion\&quot;:\&quot;US\&quot;,\&quot;PrimaryCurrencyISO\&quot;:\&quot;USD\&quot;,\&quot;ApplicationWithdrawTimer\&quot;:\&quot;P5D\&quot;,\&quot;ApplicationREGBWaitTimer\&quot;:\&quot;P1D\&quot;,\&quot;CovenantLeadDays\&quot;:90,\&quot;TestAttribute\&quot;:\&quot;A1\&quot;}}}]}],\&quot;exchangeRateDate\&quot;:null,\&quot;segment\&quot;:\&quot;Corporate\&quot;,\&quot;PortfolioOwner\&quot;:\&quot;TestUser1 BNI\&quot;,\&quot;exchangeCurrency\&quot;:null,\&quot;DefaultCurrencyISO\&quot;:\&quot;IDR\&quot;,\&quot;RecordId\&quot;:\&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a\&quot;,\&quot;currencyConversionRate\&quot;:null,\&quot;Portfolios\&quot;:[{\&quot;PortfolioRecordId\&quot;:\&quot;15592359\&quot;,\&quot;PortfolioName\&quot;:\&quot;Manager Testing\&quot;,\&quot;PortfolioType\&quot;:\&quot;Portfolio\&quot;,\&quot;EffectiveRoot\&quot;:{\&quot;AncestorLevel\&quot;:3,\&quot;AncestorPortfolioRecordId\&quot;:\&quot;7887312\&quot;,\&quot;AncestorPortfolioName\&quot;:\&quot;TestPortfolio\&quot;,\&quot;AncestorCustomAttribute\&quot;:{\&quot;Integration\&quot;:{\&quot;ServicingSystem\&quot;:\&quot;NA\&quot;,\&quot;CLOOpportunity\&quot;:false,\&quot;Dynamics\&quot;:false,\&quot;IntelligentKnowledgeCenter\&quot;:false,\&quot;Salesforce\&quot;:false},\&quot;AppRegion\&quot;:\&quot;US\&quot;,\&quot;PrimaryCurrencyISO\&quot;:\&quot;USD\&quot;,\&quot;ApplicationWithdrawTimer\&quot;:\&quot;P5D\&quot;,\&quot;ApplicationREGBWaitTimer\&quot;:\&quot;P1D\&quot;,\&quot;CovenantLeadDays\&quot;:90,\&quot;TestAttribute\&quot;:\&quot;A1\&quot;}}}]},\&quot;DisplayDivisorLabel\&quot;:\&quot;(k)\&quot;,\&quot;candidateUserIds\&quot;:\&quot;TESTUSER1.BNI@CLO.COM,,,,,,\&quot;,\&quot;googleMapKey\&quot;:\&quot;AIzaSyAw1r9V3DrFm8QQvjzu8m6PFeq5gKQY27c\&quot;,\&quot;dealNumber\&quot;:\&quot;1204\&quot;,\&quot;Approval_TAE\&quot;:0,\&quot;name\&quot;:\&quot;Corporate Test Component | Deal No.BNI-GRP-B31E7E-1204\&quot;,\&quot;Collection\&quot;:\&quot;application\&quot;,\&quot;stageCollateralCount\&quot;:0,\&quot;taskName\&quot;:\&quot;\&quot;,\&quot;baseURL_FE_Omni\&quot;:\&quot;api/omniproxy\&quot;,\&quot;policyExceptionsCount\&quot;:0,\&quot;CommentsByRM\&quot;:null,\&quot;CRED_D007\&quot;:[{\&quot;RequiredStage\&quot;:\&quot;Application\&quot;,\&quot;Category_\&quot;:\&quot;Application Info.\&quot;,\&quot;DocumentStorageType\&quot;:\&quot;\&quot;,\&quot;AppliesTo\&quot;:\&quot;Application\&quot;,\&quot;Type_\&quot;:\&quot;Approved Call Memo\&quot;,\&quot;SystemGenerated\&quot;:true}],\&quot;DisplayDivisor\&quot;:1000,\&quot;isCancelledByCommittee\&quot;:false,\&quot;googleMapUrl\&quot;:\&quot;https://www.google.com/maps/embed/v1\&quot;,\&quot;facilityDocGen\&quot;:false,\&quot;applicationStartDate\&quot;:\&quot;2025-03-18\&quot;,\&quot;collateralCount\&quot;:0,\&quot;applicationEndDate\&quot;:\&quot;\&quot;,\&quot;Task_Permission_1\&quot;:\&quot;Task_Permission_1\&quot;,\&quot;PrimaryCurrencyISO\&quot;:\&quot;IDR\&quot;,\&quot;docCustomerId\&quot;:null,\&quot;creditDOB\&quot;:{\&quot;__definitionId\&quot;:\&quot;DOE-6b0c503a-03dd-11f0-bc6a-000d3a04bee4\&quot;,\&quot;__definitionKey\&quot;:\&quot;CRED_D005\&quot;,\&quot;ReferenceId\&quot;:\&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a\&quot;,\&quot;State\&quot;:\&quot;Application\&quot;,\&quot;Data\&quot;:{\&quot;name\&quot;:\&quot;Corporate Test Component | Deal No.BNI-GRP-B31E7E-1204\&quot;,\&quot;CustomerGroupName\&quot;:\&quot;Corporate Test Component\&quot;,\&quot;CustomerGroupNo\&quot;:\&quot;BNI-GRP-B31E7E\&quot;,\&quot;CustomerGroupRecordId\&quot;:\&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a\&quot;,\&quot;dealNumber\&quot;:\&quot;1204\&quot;,\&quot;TAE\&quot;:0,\&quot;caseId\&quot;:\&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4\&quot;,\&quot;assigneeId\&quot;:\&quot;TESTUSER1.BNI@CLO.COM\&quot;,\&quot;assigneeDisplayName\&quot;:\&quot;TestUser1 BNI\&quot;,\&quot;applicationType\&quot;:\&quot;Baru\&quot;,\&quot;targetCompletionDate\&quot;:null,\&quot;segment\&quot;:\&quot;Corporate\&quot;,\&quot;appRegion\&quot;:\&quot;US\&quot;,\&quot;PrimaryCurrencyISO\&quot;:\&quot;IDR\&quot;,\&quot;dealTeam\&quot;:false,\&quot;CreditAnalyst\&quot;:\&quot;\&quot;,\&quot;PortfolioManager\&quot;:\&quot;\&quot;,\&quot;CreditReviewer\&quot;:\&quot;\&quot;,\&quot;CreditReviewer2\&quot;:\&quot;\&quot;,\&quot;Syndications\&quot;:\&quot;\&quot;,\&quot;Legal\&quot;:\&quot;\&quot;,\&quot;ownerId\&quot;:\&quot;\&quot;,\&quot;appName\&quot;:\&quot;Corporate Test Component | Deal No.BNI-GRP-B31E7E-1204\&quot;,\&quot;policyExemptions\&quot;:false,\&quot;applicationRegion\&quot;:\&quot;US\&quot;,\&quot;LVR\&quot;:0,\&quot;currentTAE\&quot;:0,\&quot;regBStatus\&quot;:\&quot;\&quot;,\&quot;regBTimer\&quot;:0,\&quot;crmApplicationId\&quot;:\&quot;\&quot;,\&quot;crmApplicationName\&quot;:\&quot;Corporate Test Component new loan opportunity\&quot;,\&quot;enabledCRM\&quot;:\&quot;None\&quot;,\&quot;ManualDecision\&quot;:\&quot;\&quot;,\&quot;DeclineReason1\&quot;:\&quot;\&quot;,\&quot;DeclineReason2\&quot;:\&quot;\&quot;,\&quot;DeclineReason3\&quot;:\&quot;\&quot;,\&quot;CommentsByRM\&quot;:\&quot;\&quot;,\&quot;OtherDeclineComments\&quot;:\&quot;\&quot;,\&quot;IsRegB\&quot;:false,\&quot;ActionTaken\&quot;:\&quot;\&quot;},\&quot;Id\&quot;:\&quot;73ba6dd5-d3ef-4c1a-b25d-7d02a4dba5e6\&quot;,\&quot;__flowableVariableType\&quot;:\&quot;flowableDataObject\&quot;},\&quot;IssueDeclineLetterDocument\&quot;:null,\&quot;CustomerGroupNo\&quot;:\&quot;BNI-GRP-B31E7E\&quot;,\&quot;creditApplicationCaseId\&quot;:\&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4\&quot;,\&quot;approvalConditionCount\&quot;:0,\&quot;CustomerGroupName\&quot;:\&quot;Corporate Test Component\&quot;,\&quot;SyndicatedFacility\&quot;:false,\&quot;startUserId\&quot;:\&quot;TESTUSER1.BNI@CLO.COM\&quot;,\&quot;nextReviewDate\&quot;:\&quot;\&quot;,\&quot;WithdrawalComments\&quot;:null,\&quot;LELYes\&quot;:false,\&quot;creditReOpenCount\&quot;:0,\&quot;checklistTask1\&quot;:\&quot;TSK-bb24a0f8-03e1-11f0-bc6a-000d3a04bee4\&quot;,\&quot;applicationReferenceId\&quot;:\&quot;73ba6dd5-d3ef-4c1a-b25d-7d02a4dba5e6\&quot;,\&quot;startTime\&quot;:\&quot;2025-03-18T10:04:54.577Z\&quot;,\&quot;LELNo\&quot;:false,\&quot;isApproved\&quot;:false,\&quot;corpCredInitCompleted\&quot;:true,\&quot;isRejectedByCommittee\&quot;:false,\&quot;stageFacilityCount\&quot;:0,\&quot;owner\&quot;:\&quot;TESTUSER1.BNI@CLO.COM\&quot;,\&quot;googleApiKey\&quot;:\&quot;AIzaSyBtQIebvdI_GlLgavtqmySE-Iyn0vtNPv4\&quot;,\&quot;facilitiesCount\&quot;:0,\&quot;singleDocRequiredStage\&quot;:null,\&quot;errorMessage\&quot;:null,\&quot;CaseId\&quot;:\&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4\&quot;,\&quot;activationConditionCount\&quot;:0,\&quot;borrowerReviewList\&quot;:[],\&quot;OtherDeclineComments\&quot;:null,\&quot;assigneeId\&quot;:\&quot;TESTUSER1.BNI@CLO.COM\&quot;,\&quot;memoDocument\&quot;:false,\&quot;isWithdrawn\&quot;:false,\&quot;DeclineReason2\&quot;:null,\&quot;DeclineReason3\&quot;:null,\&quot;servicingSystem\&quot;:\&quot;NA\&quot;,\&quot;importTryCount\&quot;:1,\&quot;stages\&quot;:[{\&quot;stage\&quot;:\&quot;Application\&quot;,\&quot;status\&quot;:\&quot;1\&quot;,\&quot;stageStartDate\&quot;:\&quot;2025-03-18T10:04:56.760Z\&quot;,\&quot;stageEndDate\&quot;:null},{\&quot;stage\&quot;:\&quot;Underwriting\&quot;,\&quot;status\&quot;:\&quot;0\&quot;,\&quot;stageStartDate\&quot;:null,\&quot;stageEndDate\&quot;:null},{\&quot;stage\&quot;:\&quot;Credit Decisioning\&quot;,\&quot;status\&quot;:\&quot;0\&quot;,\&quot;stageStartDate\&quot;:null,\&quot;stageEndDate\&quot;:null},{\&quot;stage\&quot;:\&quot;Documentation\&quot;,\&quot;status\&quot;:\&quot;0\&quot;,\&quot;stageStartDate\&quot;:null,\&quot;stageEndDate\&quot;:null},{\&quot;stage\&quot;:\&quot;Closing\&quot;,\&quot;status\&quot;:\&quot;0\&quot;,\&quot;stageStartDate\&quot;:null,\&quot;stageEndDate\&quot;:null}],\&quot;FXRateSource\&quot;:\&quot;CLO\&quot;,\&quot;baseURL_FE\&quot;:\&quot;api/omniproxy\&quot;,\&quot;DeclineReason1\&quot;:null,\&quot;approvalLevel\&quot;:\&quot;\&quot;,\&quot;baseURL_BE\&quot;:\&quot;api/omniproxy\&quot;},\&quot;CustomerGroupRecordId\&quot;:\&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a\&quot;,\&quot;WithdrawalLetterDetails\&quot;:null,\&quot;initiator\&quot;:\&quot;TESTUSER1.BNI@CLO.COM\&quot;,\&quot;Regulatory\&quot;:{\&quot;US\&quot;:\&quot;false\&quot;},\&quot;covenantCount\&quot;:0,\&quot;baseURL_Optimist_FE\&quot;:\&quot;https://vwmazbnidevopt.dev.fiscloudservices.com/Optimist8_v4/\&quot;,\&quot;googleApiUrl\&quot;:\&quot;https://maps.googleapis.com/maps/api\&quot;,\&quot;DisplayPrecision\&quot;:0,\&quot;singleDocName\&quot;:null,\&quot;applicationStatus\&quot;:\&quot;In Progress\&quot;,\&quot;isDecisioned\&quot;:false,\&quot;notActivationCovenantCount\&quot;:0,\&quot;customerReOpenCount\&quot;:0,\&quot;isWithdrawnBttnDisabled\&quot;:true,\&quot;segment\&quot;:\&quot;Corporate\&quot;,\&quot;ManualDecision\&quot;:null,\&quot;GeneralActivity\&quot;:true,\&quot;conditionCount\&quot;:0,\&quot;createSingleDoc\&quot;:false,\&quot;QATesting\&quot;:false,\&quot;dealSetupComplete\&quot;:true,\&quot;dealSetup\&quot;:\&quot;TSK-71ef9708-03e0-11f0-bc6a-000d3a04bee4\&quot;,\&quot;LegalEntityGroup\&quot;:{\&quot;Description\&quot;:null,\&quot;DefaultLanguage\&quot;:\&quot;English\&quot;,\&quot;ParentRecordId\&quot;:null,\&quot;ChildLegalEntityGroups\&quot;:[],\&quot;Comments\&quot;:[{\&quot;Id\&quot;:\&quot;2728720f-2b3f-4451-9e9b-076ed6e5dec2\&quot;,\&quot;EntityType\&quot;:\&quot;LegalEntityGroup\&quot;,\&quot;Type\&quot;:\&quot;Notes\&quot;,\&quot;Comment\&quot;:null}],\&quot;Users\&quot;:[{\&quot;Id\&quot;:null,\&quot;Type\&quot;:\&quot;Relationship Manager\&quot;,\&quot;RelationshipType\&quot;:\&quot;Primary\&quot;,\&quot;Description\&quot;:\&quot;TestUser1 BNI\&quot;,\&quot;UserEmailId\&quot;:\&quot;TESTUSER1.BNI@CLO.COM\&quot;,\&quot;Name\&quot;:\&quot;TestUser1 BNI\&quot;}],\&quot;LinkedLegalEntityGroupAliases\&quot;:[],\&quot;Name\&quot;:\&quot;Corporate Test Component\&quot;,\&quot;Type\&quot;:\&quot;Borrowing Group\&quot;,\&quot;ConfidentialHandlingFlag\&quot;:false,\&quot;ParentLegalEntityGroup\&quot;:null,\&quot;CustomerGroupID\&quot;:\&quot;BNI-GRP-B31E7E\&quot;,\&quot;LinkedLegalEntities\&quot;:[{\&quot;RecordId\&quot;:\&quot;06eb877b-db47-4736-8f5b-6149a04ceae3\&quot;,\&quot;Description\&quot;:null,\&quot;EntityStatus\&quot;:null,\&quot;InternalEntityType\&quot;:\&quot;Company\&quot;,\&quot;LegalForm\&quot;:\&quot;PT\&quot;,\&quot;CustomerID\&quot;:\&quot;BNI-CUS-E8C35A\&quot;,\&quot;pii_InternalRating\&quot;:null,\&quot;pii_InternalRatingDate\&quot;:null,\&quot;ShortName\&quot;:\&quot;Test 234 New\&quot;,\&quot;IndustryCode\&quot;:null,\&quot;IndustryDesc\&quot;:null,\&quot;pii_CreditScore\&quot;:null,\&quot;pii_CreditScoreDate\&quot;:null,\&quot;Title\&quot;:null,\&quot;FirstName\&quot;:null,\&quot;MiddleName\&quot;:null,\&quot;LastName\&quot;:null,\&quot;Suffix\&quot;:null,\&quot;FullName\&quot;:\&quot;Test 234 New\&quot;,\&quot;AssignedPrimaryPortfolio\&quot;:\&quot;Manager Testing\&quot;,\&quot;PortfolioOwner\&quot;:null,\&quot;RelationshipSince\&quot;:null,\&quot;pii_IDReference\&quot;:null,\&quot;MaritalStatus\&quot;:null,\&quot;pii_DateOfBirth\&quot;:null,\&quot;EmploymentStatus\&quot;:null,\&quot;CurrentEmployer\&quot;:null,\&quot;TypeOfBusiness\&quot;:null,\&quot;JobTitle\&quot;:null,\&quot;pii_IncomeEmployment\&quot;:null,\&quot;pii_IncomeOther\&quot;:null,\&quot;pii_IncomeTotal\&quot;:null,\&quot;IncorporationDate\&quot;:null,\&quot;ResolutionDate\&quot;:null,\&quot;NoOfSigners\&quot;:null,\&quot;NoOfEmployees\&quot;:null,\&quot;CurrentOwnershipDate\&quot;:null,\&quot;TotalSalesInd\&quot;:null,\&quot;TotalSalesDate\&quot;:null,\&quot;RegOType\&quot;:null,\&quot;PriorBankruptcyDate\&quot;:null,\&quot;OutstandingObligationAmount\&quot;:null,\&quot;pii_TrustName\&quot;:null,\&quot;OutOfMarketFinancing\&quot;:null,\&quot;LastReviewDate\&quot;:null,\&quot;NextReviewDate\&quot;:null,\&quot;LEI\&quot;:null,\&quot;EntityType\&quot;:\&quot;Company\&quot;,\&quot;RegulatoryEntityType\&quot;:null,\&quot;TradingFlag\&quot;:null,\&quot;Gender\&quot;:null,\&quot;Spouse\&quot;:null,\&quot;NoOfDependents\&quot;:null,\&quot;ReviewFrequency\&quot;:null,\&quot;TotalSalesGroup\&quot;:null,\&quot;TotalSalesGroupCurrencyISO\&quot;:null,\&quot;TotalSalesIndCurrencyISO\&quot;:null,\&quot;TotalAssetsGroup\&quot;:null,\&quot;TotalAssetsGroupCurrencyISO\&quot;:null,\&quot;TotalAssetsInd\&quot;:null,\&quot;TotalAssetsDate\&quot;:null,\&quot;TotalAssetsIndCurrencyISO\&quot;:null,\&quot;RegulatedFlag\&quot;:null,\&quot;FinancialEntityFlag\&quot;:null,\&quot;RegulatoryCCRFlag\&quot;:null,\&quot;RegulatoryCRFlag\&quot;:null,\&quot;RegulatoryCVAFlag\&quot;:null,\&quot;BusinessStatus\&quot;:null,\&quot;BusinessStatusDate\&quot;:null,\&quot;SovereignTreatmentFlag\&quot;:null,\&quot;QualifiedCCPFlag\&quot;:null,\&quot;SMEFlag\&quot;:null,\&quot;QualifiedMDBFlag\&quot;:null,\&quot;EquityScalingFlag\&quot;:null,\&quot;OverrideRiskWeight\&quot;:null,\&quot;IdiosyncraticWeight\&quot;:null,\&quot;LegalJurisdiction\&quot;:null,\&quot;RegulatoryJurisdiction\&quot;:null,\&quot;InstitutionalProtectionFlag\&quot;:null,\&quot;DefunctDate\&quot;:null,\&quot;pii_PrimaryIdentifier\&quot;:\&quot;123456789009811\&quot;,\&quot;pii_PrimaryIdentifierType\&quot;:null,\&quot;pii_PrimaryIDDateOfIssue\&quot;:null,\&quot;pii_PrimaryIDDateOfExpiration\&quot;:null,\&quot;DBA\&quot;:null,\&quot;EmploymentSince\&quot;:null,\&quot;OutstandingObligationAmountCurrencyISO\&quot;:null,\&quot;OutstandingObligationDate\&quot;:null,\&quot;OOMarketFlag\&quot;:null,\&quot;CustomerClassification\&quot;:null,\&quot;Website\&quot;:null,\&quot;pii_Race\&quot;:null,\&quot;pii_Ethnicity\&quot;:null,\&quot;CitizenshipStatus\&quot;:null,\&quot;FATCAStatus\&quot;:null,\&quot;FATCACompliant\&quot;:null,\&quot;ConfidentialHandlingFlag\&quot;:null,\&quot;InternalCustomerFlag\&quot;:null,\&quot;DefaultLanguage\&quot;:null,\&quot;SecondaryIDType\&quot;:null,\&quot;pii_SecondaryIDReference\&quot;:null,\&quot;SecondaryIDDateOfIssue\&quot;:null,\&quot;SecondaryIDDateOfExpiration\&quot;:null,\&quot;pii_PhoneNumber1\&quot;:null,\&quot;pii_ExtensionNumber1\&quot;:null,\&quot;PhoneType1\&quot;:null,\&quot;pii_PhoneNumber2\&quot;:null,\&quot;pii_ExtensionNumber2\&quot;:null,\&quot;PhoneType2\&quot;:null,\&quot;pii_EmailAddress\&quot;:null,\&quot;pii_FaxNumber\&quot;:null,\&quot;RegOFlag\&quot;:null,\&quot;PriorBankruptcyFlag\&quot;:null,\&quot;OutstandingLiensFlag\&quot;:null,\&quot;PersonalTrustFlag\&quot;:null,\&quot;PrimaryContact\&quot;:null,\&quot;ReviewFrequencyType\&quot;:null,\&quot;EmployerAddress\&quot;:null,\&quot;EmployerCity\&quot;:null,\&quot;EmployerStateProvince\&quot;:null,\&quot;EmployerPostalCode\&quot;:null,\&quot;pii_CurrentAddress\&quot;:null,\&quot;pii_CurrentAddressCity\&quot;:null,\&quot;pii_CurrentAddressStateProvince\&quot;:null,\&quot;pii_CurrentAddressPostalCode\&quot;:null,\&quot;pii_SecondaryAddress\&quot;:null,\&quot;pii_SecondaryAddressCity\&quot;:null,\&quot;pii_SecondaryAddressStateProvince\&quot;:null,\&quot;pii_SecondaryAddressPostalCode\&quot;:null,\&quot;DefaultGLUnit\&quot;:null,\&quot;ServicingUnit\&quot;:null,\&quot;pii_DefaultInboundBankAddress\&quot;:null,\&quot;pii_DefaultInboundBankCity\&quot;:null,\&quot;pii_DefaultInboundBankStateProvince\&quot;:null,\&quot;pii_DefaultInboundBankPostalCode\&quot;:null,\&quot;pii_DefaultInboundBankCountry\&quot;:null,\&quot;pii_DefaultInboundABATransitNumber\&quot;:null,\&quot;pii_DefaultInboundBankAccountType\&quot;:null,\&quot;pii_DefaultInboundBankAccountName\&quot;:null,\&quot;pii_DefaultInboundBankAccountNumber\&quot;:null,\&quot;pii_DefaultInboundBankContact\&quot;:null,\&quot;pii_DefaultInboundBankName\&quot;:null,\&quot;pii_DefaultInboundBankContactPhoneNumber\&quot;:null,\&quot;pii_DefaultInboundBankFaxNumber\&quot;:null,\&quot;pii_DefaultInboundBankBranchName\&quot;:null,\&quot;pii_DefaultOutboundBankAddress\&quot;:null,\&quot;pii_DefaultOutboundBankCity\&quot;:null,\&quot;pii_DefaultOutboundBankStateProvince\&quot;:null,\&quot;pii_DefaultOutboundBankPostalCode\&quot;:null,\&quot;pii_DefaultOutboundBankCountry\&quot;:null,\&quot;pii_DefaultOutboundABATransitNumber\&quot;:null,\&quot;pii_DefaultOutboundBankAccountType\&quot;:null,\&quot;pii_DefaultOutboundBankAccountName\&quot;:null,\&quot;pii_DefaultOutboundBankAccountNumber\&quot;:null,\&quot;pii_DefaultOutboundBankContact\&quot;:null,\&quot;pii_DefaultOutboundBankName\&quot;:null,\&quot;pii_DefaultOutboundBankContactPhoneNumber\&quot;:null,\&quot;pii_DefaultOutboundBankFaxNumber\&quot;:null,\&quot;pii_DefaultOutboundBankBranchName\&quot;:null,\&quot;pii_CurrentAddressCountry\&quot;:null,\&quot;CurrentAddressType\&quot;:null,\&quot;pii_SecondaryAddressCountry\&quot;:null,\&quot;SecondaryAddressType\&quot;:null,\&quot;TaxStatus\&quot;:null,\&quot;pii_SecondaryAddressCounty\&quot;:null,\&quot;pii_CurrentAddressCounty\&quot;:null,\&quot;InternalEntityTypeCode\&quot;:null,\&quot;ConfidentialHandling\&quot;:null,\&quot;InternalCustomer\&quot;:null,\&quot;ApprovedDirectLiabilityLimit\&quot;:null,\&quot;ApprovedTotalLiabilityLimit\&quot;:null,\&quot;LimitsApprovedDate\&quot;:null,\&quot;DefaultInboundPaymentCurrencyType\&quot;:null,\&quot;DefaultOutboundPaymentCurrencyType\&quot;:null,\&quot;DefaultInboundPaymentCode\&quot;:null,\&quot;DefaultOutboundPaymentCode\&quot;:null,\&quot;DefaultInboundPaymentSpecialInstructions\&quot;:null,\&quot;DefaultOutboundPaymentSpecialInstructions\&quot;:null,\&quot;pii_PreviousAddressCountry\&quot;:null,\&quot;PreviousAddressType\&quot;:null,\&quot;CurrentAddressSince\&quot;:null,\&quot;PreviousAddressSince\&quot;:null,\&quot;SecondaryAddressSince\&quot;:null,\&quot;ServicingUnitSection\&quot;:null,\&quot;InvestorIndicator\&quot;:null,\&quot;PDValue\&quot;:null,\&quot;LGDValue\&quot;:null,\&quot;CurrentAddressIdentifier\&quot;:null,\&quot;CurrentAddressName1\&quot;:null,\&quot;SecondaryAddressIdentifier\&quot;:null,\&quot;SecondaryAddressName1\&quot;:null,\&quot;DefaultInboundCashOffsetType\&quot;:null,\&quot;DefaultOutboundCashOffsetType\&quot;:null,\&quot;DefaultInboundSwiftIdentifier\&quot;:null,\&quot;DefaultOutboundSwiftIdentifier\&quot;:null,\&quot;ExternalRatingType\&quot;:null,\&quot;FullName2\&quot;:null,\&quot;FullName3\&quot;:null,\&quot;SortName\&quot;:null,\&quot;DefaultCurrencyType\&quot;:null,\&quot;WatchStatusIndicator\&quot;:null,\&quot;TotalGuarantees\&quot;:null,\&quot;WatchListDate\&quot;:null,\&quot;DispositionType\&quot;:null,\&quot;PublishedName\&quot;:null,\&quot;BorrowerIndicatorFlag\&quot;:null,\&quot;WatchListReason\&quot;:null,\&quot;CurrentAddressName2\&quot;:null,\&quot;CurrentAddressName3\&quot;:null,\&quot;pii_CurrentAddress2\&quot;:null,\&quot;pii_CurrentAddress3\&quot;:null,\&quot;pii_CurrentAddress4\&quot;:null,\&quot;pii_CurrentAddressTelexNumber\&quot;:null,\&quot;pii_CurrentAddressSwiftIdentifier\&quot;:null,\&quot;SecurityDesignation\&quot;:null,\&quot;SecondaryAddressName2\&quot;:null,\&quot;SecondaryAddressName3\&quot;:null,\&quot;pii_SecondaryAddress2\&quot;:null,\&quot;pii_SecondaryAddress3\&quot;:null,\&quot;pii_SecondaryAddress4\&quot;:null,\&quot;pii_SecondaryAddressPhone1\&quot;:null,\&quot;pii_SecondaryAddressPhone2\&quot;:null,\&quot;pii_SecondaryAddressFaxNumber\&quot;:null,\&quot;pii_SecondaryAddressTelexNumber\&quot;:null,\&quot;pii_SecondaryAddressSwiftIdentifier\&quot;:null,\&quot;pii_SecondaryAddressEmailAddress\&quot;:null,\&quot;InternalOrganisation\&quot;:null,\&quot;LinkedBackgroundReports\&quot;:[],\&quot;LinkedLegalEntityAliases\&quot;:[],\&quot;Comments\&quot;:[],\&quot;CountrySubRegions\&quot;:[],\&quot;Locations\&quot;:[],\&quot;Users\&quot;:[],\&quot;LinkedRelationships\&quot;:[],\&quot;Industries\&quot;:[],\&quot;Contacts\&quot;:[],\&quot;CountryOfIncorpOrResidence\&quot;:\&quot;Indonesia\&quot;,\&quot;BusinessEntityType\&quot;:null,\&quot;DoingBusinessAs\&quot;:null,\&quot;CustomerSegment\&quot;:\&quot;Corporate\&quot;,\&quot;LMSID\&quot;:null,\&quot;customerQuadrant\&quot;:null,\&quot;portfolioNeeded\&quot;:null,\&quot;customerRemarks\&quot;:null,\&quot;LinkedPortfolios\&quot;:[{\&quot;LegalEntityRecordId\&quot;:\&quot;06eb877b-db47-4736-8f5b-6149a04ceae3\&quot;,\&quot;PortfolioRecordId\&quot;:\&quot;15592359\&quot;,\&quot;RelationshipType\&quot;:\&quot;Primary Portfolio\&quot;,\&quot;PortfolioDataSource\&quot;:null,\&quot;LegalEntityDataSource\&quot;:null,\&quot;PortfolioName\&quot;:\&quot;Manager Testing\&quot;,\&quot;PortfolioType\&quot;:\&quot;Portfolio\&quot;,\&quot;PortfolioDescription\&quot;:\&quot;Sample Portfolio\&quot;,\&quot;EffectiveRoot\&quot;:{\&quot;AncestorLevel\&quot;:3,\&quot;AncestorPortfolioRecordId\&quot;:\&quot;7887312\&quot;,\&quot;AncestorPortfolioName\&quot;:\&quot;TestPortfolio\&quot;,\&quot;AncestorCustomAttribute\&quot;:{\&quot;Integration\&quot;:{\&quot;ServicingSystem\&quot;:\&quot;NA\&quot;,\&quot;CLOOpportunity\&quot;:false,\&quot;Dynamics\&quot;:false,\&quot;IntelligentKnowledgeCenter\&quot;:false,\&quot;Salesforce\&quot;:false},\&quot;AppRegion\&quot;:\&quot;US\&quot;,\&quot;PrimaryCurrencyISO\&quot;:\&quot;USD\&quot;,\&quot;ApplicationWithdrawTimer\&quot;:\&quot;P5D\&quot;,\&quot;ApplicationREGBWaitTimer\&quot;:\&quot;P1D\&quot;,\&quot;CovenantLeadDays\&quot;:90,\&quot;TestAttribute\&quot;:\&quot;A1\&quot;}}}]}],\&quot;exchangeRateDate\&quot;:null,\&quot;segment\&quot;:\&quot;Corporate\&quot;,\&quot;PortfolioOwner\&quot;:\&quot;TestUser1 BNI\&quot;,\&quot;exchangeCurrency\&quot;:null,\&quot;DefaultCurrencyISO\&quot;:\&quot;IDR\&quot;,\&quot;RecordId\&quot;:\&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a\&quot;,\&quot;currencyConversionRate\&quot;:null,\&quot;Portfolios\&quot;:[{\&quot;PortfolioRecordId\&quot;:\&quot;15592359\&quot;,\&quot;PortfolioName\&quot;:\&quot;Manager Testing\&quot;,\&quot;PortfolioType\&quot;:\&quot;Portfolio\&quot;,\&quot;EffectiveRoot\&quot;:{\&quot;AncestorLevel\&quot;:3,\&quot;AncestorPortfolioRecordId\&quot;:\&quot;7887312\&quot;,\&quot;AncestorPortfolioName\&quot;:\&quot;TestPortfolio\&quot;,\&quot;AncestorCustomAttribute\&quot;:{\&quot;Integration\&quot;:{\&quot;ServicingSystem\&quot;:\&quot;NA\&quot;,\&quot;CLOOpportunity\&quot;:false,\&quot;Dynamics\&quot;:false,\&quot;IntelligentKnowledgeCenter\&quot;:false,\&quot;Salesforce\&quot;:false},\&quot;AppRegion\&quot;:\&quot;US\&quot;,\&quot;PrimaryCurrencyISO\&quot;:\&quot;USD\&quot;,\&quot;ApplicationWithdrawTimer\&quot;:\&quot;P5D\&quot;,\&quot;ApplicationREGBWaitTimer\&quot;:\&quot;P1D\&quot;,\&quot;CovenantLeadDays\&quot;:90,\&quot;TestAttribute\&quot;:\&quot;A1\&quot;}}}]},\&quot;DisplayDivisorLabel\&quot;:\&quot;(k)\&quot;,\&quot;candidateUserIds\&quot;:\&quot;TESTUSER1.BNI@CLO.COM,,,,,,\&quot;,\&quot;task\&quot;:{\&quot;scopeId\&quot;:\&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4\&quot;,\&quot;subScopeId\&quot;:\&quot;CAS-71ecfeaf-03e0-11f0-bc6a-000d3a04bee4\&quot;,\&quot;createTime\&quot;:\&quot;2025-03-18T10:04:56.760Z\&quot;,\&quot;formKey\&quot;:\&quot;CRED_F511_BNI\&quot;,\&quot;scopeType\&quot;:\&quot;cmmn\&quot;,\&quot;name\&quot;:\&quot;Test UAM\&quot;,\&quot;id\&quot;:\&quot;TSK-71efe52f-03e0-11f0-bc6a-000d3a04bee4\&quot;,\&quot;assignee\&quot;:\&quot;TESTUSER1.BNI@CLO.COM\&quot;,\&quot;priority\&quot;:50},\&quot;googleMapKey\&quot;:\&quot;AIzaSyAw1r9V3DrFm8QQvjzu8m6PFeq5gKQY27c\&quot;,\&quot;dealNumber\&quot;:\&quot;1204\&quot;,\&quot;Approval_TAE\&quot;:0,\&quot;name\&quot;:\&quot;Corporate Test Component | Deal No.BNI-GRP-B31E7E-1204\&quot;,\&quot;Collection\&quot;:\&quot;application\&quot;,\&quot;stageCollateralCount\&quot;:0,\&quot;taskName\&quot;:\&quot;\&quot;,\&quot;baseURL_FE_Omni\&quot;:\&quot;api/omniproxy\&quot;,\&quot;policyExceptionsCount\&quot;:0,\&quot;CommentsByRM\&quot;:null,\&quot;CRED_D007\&quot;:[{\&quot;RequiredStage\&quot;:\&quot;Application\&quot;,\&quot;Category_\&quot;:\&quot;Application Info.\&quot;,\&quot;DocumentStorageType\&quot;:\&quot;\&quot;,\&quot;AppliesTo\&quot;:\&quot;Application\&quot;,\&quot;Type_\&quot;:\&quot;Approved Call Memo\&quot;,\&quot;SystemGenerated\&quot;:true}],\&quot;DisplayDivisor\&quot;:1000,\&quot;isCancelledByCommittee\&quot;:false,\&quot;googleMapUrl\&quot;:\&quot;https://www.google.com/maps/embed/v1\&quot;,\&quot;facilityDocGen\&quot;:false,\&quot;applicationStartDate\&quot;:\&quot;2025-03-18\&quot;,\&quot;collateralCount\&quot;:0,\&quot;applicationEndDate\&quot;:\&quot;\&quot;,\&quot;Task_Permission_1\&quot;:\&quot;Task_Permission_1\&quot;,\&quot;PrimaryCurrencyISO\&quot;:\&quot;IDR\&quot;,\&quot;docCustomerId\&quot;:null,\&quot;creditDOB\&quot;:{\&quot;__definitionId\&quot;:\&quot;DOE-6b0c503a-03dd-11f0-bc6a-000d3a04bee4\&quot;,\&quot;__definitionKey\&quot;:\&quot;CRED_D005\&quot;,\&quot;ReferenceId\&quot;:\&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a\&quot;,\&quot;State\&quot;:\&quot;Application\&quot;,\&quot;Data\&quot;:{\&quot;name\&quot;:\&quot;Corporate Test Component | Deal No.BNI-GRP-B31E7E-1204\&quot;,\&quot;CustomerGroupName\&quot;:\&quot;Corporate Test Component\&quot;,\&quot;CustomerGroupNo\&quot;:\&quot;BNI-GRP-B31E7E\&quot;,\&quot;CustomerGroupRecordId\&quot;:\&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a\&quot;,\&quot;dealNumber\&quot;:\&quot;1204\&quot;,\&quot;TAE\&quot;:0,\&quot;caseId\&quot;:\&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4\&quot;,\&quot;assigneeId\&quot;:\&quot;TESTUSER1.BNI@CLO.COM\&quot;,\&quot;assigneeDisplayName\&quot;:\&quot;TestUser1 BNI\&quot;,\&quot;applicationType\&quot;:\&quot;Baru\&quot;,\&quot;targetCompletionDate\&quot;:null,\&quot;segment\&quot;:\&quot;Corporate\&quot;,\&quot;appRegion\&quot;:\&quot;US\&quot;,\&quot;PrimaryCurrencyISO\&quot;:\&quot;IDR\&quot;,\&quot;dealTeam\&quot;:false,\&quot;CreditAnalyst\&quot;:\&quot;\&quot;,\&quot;PortfolioManager\&quot;:\&quot;\&quot;,\&quot;CreditReviewer\&quot;:\&quot;\&quot;,\&quot;CreditReviewer2\&quot;:\&quot;\&quot;,\&quot;Syndications\&quot;:\&quot;\&quot;,\&quot;Legal\&quot;:\&quot;\&quot;,\&quot;ownerId\&quot;:\&quot;\&quot;,\&quot;appName\&quot;:\&quot;Corporate Test Component | Deal No.BNI-GRP-B31E7E-1204\&quot;,\&quot;policyExemptions\&quot;:false,\&quot;applicationRegion\&quot;:\&quot;US\&quot;,\&quot;LVR\&quot;:0,\&quot;currentTAE\&quot;:0,\&quot;regBStatus\&quot;:\&quot;\&quot;,\&quot;regBTimer\&quot;:0,\&quot;crmApplicationId\&quot;:\&quot;\&quot;,\&quot;crmApplicationName\&quot;:\&quot;Corporate Test Component new loan opportunity\&quot;,\&quot;enabledCRM\&quot;:\&quot;None\&quot;,\&quot;ManualDecision\&quot;:\&quot;\&quot;,\&quot;DeclineReason1\&quot;:\&quot;\&quot;,\&quot;DeclineReason2\&quot;:\&quot;\&quot;,\&quot;DeclineReason3\&quot;:\&quot;\&quot;,\&quot;CommentsByRM\&quot;:\&quot;\&quot;,\&quot;OtherDeclineComments\&quot;:\&quot;\&quot;,\&quot;IsRegB\&quot;:false,\&quot;ActionTaken\&quot;:\&quot;\&quot;},\&quot;Id\&quot;:\&quot;73ba6dd5-d3ef-4c1a-b25d-7d02a4dba5e6\&quot;,\&quot;__flowableVariableType\&quot;:\&quot;flowableDataObject\&quot;},\&quot;IssueDeclineLetterDocument\&quot;:null,\&quot;CustomerGroupNo\&quot;:\&quot;BNI-GRP-B31E7E\&quot;,\&quot;creditApplicationCaseId\&quot;:\&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4\&quot;,\&quot;approvalConditionCount\&quot;:0,\&quot;CustomerGroupName\&quot;:\&quot;Corporate Test Component\&quot;,\&quot;SyndicatedFacility\&quot;:false,\&quot;nextReviewDate\&quot;:\&quot;\&quot;,\&quot;WithdrawalComments\&quot;:null,\&quot;LELYes\&quot;:false,\&quot;root\&quot;:{\&quot;exception\&quot;:null,\&quot;CustomerGroupRecordId\&quot;:\&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a\&quot;,\&quot;WithdrawalLetterDetails\&quot;:null,\&quot;initiator\&quot;:\&quot;TESTUSER1.BNI@CLO.COM\&quot;,\&quot;Regulatory\&quot;:{\&quot;US\&quot;:\&quot;false\&quot;},\&quot;covenantCount\&quot;:0,\&quot;baseURL_Optimist_FE\&quot;:\&quot;https://vwmazbnidevopt.dev.fiscloudservices.com/Optimist8_v4/\&quot;,\&quot;googleApiUrl\&quot;:\&quot;https://maps.googleapis.com/maps/api\&quot;,\&quot;DisplayPrecision\&quot;:0,\&quot;singleDocName\&quot;:null,\&quot;applicationStatus\&quot;:\&quot;In Progress\&quot;,\&quot;isDecisioned\&quot;:false,\&quot;notActivationCovenantCount\&quot;:0,\&quot;customerReOpenCount\&quot;:0,\&quot;isWithdrawnBttnDisabled\&quot;:true,\&quot;segment\&quot;:\&quot;Corporate\&quot;,\&quot;ManualDecision\&quot;:null,\&quot;GeneralActivity\&quot;:true,\&quot;id\&quot;:\&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4\&quot;,\&quot;conditionCount\&quot;:0,\&quot;createSingleDoc\&quot;:false,\&quot;QATesting\&quot;:false,\&quot;dealSetupComplete\&quot;:true,\&quot;dealSetup\&quot;:\&quot;TSK-71ef9708-03e0-11f0-bc6a-000d3a04bee4\&quot;,\&quot;LegalEntityGroup\&quot;:{\&quot;Description\&quot;:null,\&quot;DefaultLanguage\&quot;:\&quot;English\&quot;,\&quot;ParentRecordId\&quot;:null,\&quot;ChildLegalEntityGroups\&quot;:[],\&quot;Comments\&quot;:[{\&quot;Id\&quot;:\&quot;2728720f-2b3f-4451-9e9b-076ed6e5dec2\&quot;,\&quot;EntityType\&quot;:\&quot;LegalEntityGroup\&quot;,\&quot;Type\&quot;:\&quot;Notes\&quot;,\&quot;Comment\&quot;:null}],\&quot;Users\&quot;:[{\&quot;Id\&quot;:null,\&quot;Type\&quot;:\&quot;Relationship Manager\&quot;,\&quot;RelationshipType\&quot;:\&quot;Primary\&quot;,\&quot;Description\&quot;:\&quot;TestUser1 BNI\&quot;,\&quot;UserEmailId\&quot;:\&quot;TESTUSER1.BNI@CLO.COM\&quot;,\&quot;Name\&quot;:\&quot;TestUser1 BNI\&quot;}],\&quot;LinkedLegalEntityGroupAliases\&quot;:[],\&quot;Name\&quot;:\&quot;Corporate Test Component\&quot;,\&quot;Type\&quot;:\&quot;Borrowing Group\&quot;,\&quot;ConfidentialHandlingFlag\&quot;:false,\&quot;ParentLegalEntityGroup\&quot;:null,\&quot;CustomerGroupID\&quot;:\&quot;BNI-GRP-B31E7E\&quot;,\&quot;LinkedLegalEntities\&quot;:[{\&quot;RecordId\&quot;:\&quot;06eb877b-db47-4736-8f5b-6149a04ceae3\&quot;,\&quot;Description\&quot;:null,\&quot;EntityStatus\&quot;:null,\&quot;InternalEntityType\&quot;:\&quot;Company\&quot;,\&quot;LegalForm\&quot;:\&quot;PT\&quot;,\&quot;CustomerID\&quot;:\&quot;BNI-CUS-E8C35A\&quot;,\&quot;pii_InternalRating\&quot;:null,\&quot;pii_InternalRatingDate\&quot;:null,\&quot;ShortName\&quot;:\&quot;Test 234 New\&quot;,\&quot;IndustryCode\&quot;:null,\&quot;IndustryDesc\&quot;:null,\&quot;pii_CreditScore\&quot;:null,\&quot;pii_CreditScoreDate\&quot;:null,\&quot;Title\&quot;:null,\&quot;FirstName\&quot;:null,\&quot;MiddleName\&quot;:null,\&quot;LastName\&quot;:null,\&quot;Suffix\&quot;:null,\&quot;FullName\&quot;:\&quot;Test 234 New\&quot;,\&quot;AssignedPrimaryPortfolio\&quot;:\&quot;Manager Testing\&quot;,\&quot;PortfolioOwner\&quot;:null,\&quot;RelationshipSince\&quot;:null,\&quot;pii_IDReference\&quot;:null,\&quot;MaritalStatus\&quot;:null,\&quot;pii_DateOfBirth\&quot;:null,\&quot;EmploymentStatus\&quot;:null,\&quot;CurrentEmployer\&quot;:null,\&quot;TypeOfBusiness\&quot;:null,\&quot;JobTitle\&quot;:null,\&quot;pii_IncomeEmployment\&quot;:null,\&quot;pii_IncomeOther\&quot;:null,\&quot;pii_IncomeTotal\&quot;:null,\&quot;IncorporationDate\&quot;:null,\&quot;ResolutionDate\&quot;:null,\&quot;NoOfSigners\&quot;:null,\&quot;NoOfEmployees\&quot;:null,\&quot;CurrentOwnershipDate\&quot;:null,\&quot;TotalSalesInd\&quot;:null,\&quot;TotalSalesDate\&quot;:null,\&quot;RegOType\&quot;:null,\&quot;PriorBankruptcyDate\&quot;:null,\&quot;OutstandingObligationAmount\&quot;:null,\&quot;pii_TrustName\&quot;:null,\&quot;OutOfMarketFinancing\&quot;:null,\&quot;LastReviewDate\&quot;:null,\&quot;NextReviewDate\&quot;:null,\&quot;LEI\&quot;:null,\&quot;EntityType\&quot;:\&quot;Company\&quot;,\&quot;RegulatoryEntityType\&quot;:null,\&quot;TradingFlag\&quot;:null,\&quot;Gender\&quot;:null,\&quot;Spouse\&quot;:null,\&quot;NoOfDependents\&quot;:null,\&quot;ReviewFrequency\&quot;:null,\&quot;TotalSalesGroup\&quot;:null,\&quot;TotalSalesGroupCurrencyISO\&quot;:null,\&quot;TotalSalesIndCurrencyISO\&quot;:null,\&quot;TotalAssetsGroup\&quot;:null,\&quot;TotalAssetsGroupCurrencyISO\&quot;:null,\&quot;TotalAssetsInd\&quot;:null,\&quot;TotalAssetsDate\&quot;:null,\&quot;TotalAssetsIndCurrencyISO\&quot;:null,\&quot;RegulatedFlag\&quot;:null,\&quot;FinancialEntityFlag\&quot;:null,\&quot;RegulatoryCCRFlag\&quot;:null,\&quot;RegulatoryCRFlag\&quot;:null,\&quot;RegulatoryCVAFlag\&quot;:null,\&quot;BusinessStatus\&quot;:null,\&quot;BusinessStatusDate\&quot;:null,\&quot;SovereignTreatmentFlag\&quot;:null,\&quot;QualifiedCCPFlag\&quot;:null,\&quot;SMEFlag\&quot;:null,\&quot;QualifiedMDBFlag\&quot;:null,\&quot;EquityScalingFlag\&quot;:null,\&quot;OverrideRiskWeight\&quot;:null,\&quot;IdiosyncraticWeight\&quot;:null,\&quot;LegalJurisdiction\&quot;:null,\&quot;RegulatoryJurisdiction\&quot;:null,\&quot;InstitutionalProtectionFlag\&quot;:null,\&quot;DefunctDate\&quot;:null,\&quot;pii_PrimaryIdentifier\&quot;:\&quot;123456789009811\&quot;,\&quot;pii_PrimaryIdentifierType\&quot;:null,\&quot;pii_PrimaryIDDateOfIssue\&quot;:null,\&quot;pii_PrimaryIDDateOfExpiration\&quot;:null,\&quot;DBA\&quot;:null,\&quot;EmploymentSince\&quot;:null,\&quot;OutstandingObligationAmountCurrencyISO\&quot;:null,\&quot;OutstandingObligationDate\&quot;:null,\&quot;OOMarketFlag\&quot;:null,\&quot;CustomerClassification\&quot;:null,\&quot;Website\&quot;:null,\&quot;pii_Race\&quot;:null,\&quot;pii_Ethnicity\&quot;:null,\&quot;CitizenshipStatus\&quot;:null,\&quot;FATCAStatus\&quot;:null,\&quot;FATCACompliant\&quot;:null,\&quot;ConfidentialHandlingFlag\&quot;:null,\&quot;InternalCustomerFlag\&quot;:null,\&quot;DefaultLanguage\&quot;:null,\&quot;SecondaryIDType\&quot;:null,\&quot;pii_SecondaryIDReference\&quot;:null,\&quot;SecondaryIDDateOfIssue\&quot;:null,\&quot;SecondaryIDDateOfExpiration\&quot;:null,\&quot;pii_PhoneNumber1\&quot;:null,\&quot;pii_ExtensionNumber1\&quot;:null,\&quot;PhoneType1\&quot;:null,\&quot;pii_PhoneNumber2\&quot;:null,\&quot;pii_ExtensionNumber2\&quot;:null,\&quot;PhoneType2\&quot;:null,\&quot;pii_EmailAddress\&quot;:null,\&quot;pii_FaxNumber\&quot;:null,\&quot;RegOFlag\&quot;:null,\&quot;PriorBankruptcyFlag\&quot;:null,\&quot;OutstandingLiensFlag\&quot;:null,\&quot;PersonalTrustFlag\&quot;:null,\&quot;PrimaryContact\&quot;:null,\&quot;ReviewFrequencyType\&quot;:null,\&quot;EmployerAddress\&quot;:null,\&quot;EmployerCity\&quot;:null,\&quot;EmployerStateProvince\&quot;:null,\&quot;EmployerPostalCode\&quot;:null,\&quot;pii_CurrentAddress\&quot;:null,\&quot;pii_CurrentAddressCity\&quot;:null,\&quot;pii_CurrentAddressStateProvince\&quot;:null,\&quot;pii_CurrentAddressPostalCode\&quot;:null,\&quot;pii_SecondaryAddress\&quot;:null,\&quot;pii_SecondaryAddressCity\&quot;:null,\&quot;pii_SecondaryAddressStateProvince\&quot;:null,\&quot;pii_SecondaryAddressPostalCode\&quot;:null,\&quot;DefaultGLUnit\&quot;:null,\&quot;ServicingUnit\&quot;:null,\&quot;pii_DefaultInboundBankAddress\&quot;:null,\&quot;pii_DefaultInboundBankCity\&quot;:null,\&quot;pii_DefaultInboundBankStateProvince\&quot;:null,\&quot;pii_DefaultInboundBankPostalCode\&quot;:null,\&quot;pii_DefaultInboundBankCountry\&quot;:null,\&quot;pii_DefaultInboundABATransitNumber\&quot;:null,\&quot;pii_DefaultInboundBankAccountType\&quot;:null,\&quot;pii_DefaultInboundBankAccountName\&quot;:null,\&quot;pii_DefaultInboundBankAccountNumber\&quot;:null,\&quot;pii_DefaultInboundBankContact\&quot;:null,\&quot;pii_DefaultInboundBankName\&quot;:null,\&quot;pii_DefaultInboundBankContactPhoneNumber\&quot;:null,\&quot;pii_DefaultInboundBankFaxNumber\&quot;:null,\&quot;pii_DefaultInboundBankBranchName\&quot;:null,\&quot;pii_DefaultOutboundBankAddress\&quot;:null,\&quot;pii_DefaultOutboundBankCity\&quot;:null,\&quot;pii_DefaultOutboundBankStateProvince\&quot;:null,\&quot;pii_DefaultOutboundBankPostalCode\&quot;:null,\&quot;pii_DefaultOutboundBankCountry\&quot;:null,\&quot;pii_DefaultOutboundABATransitNumber\&quot;:null,\&quot;pii_DefaultOutboundBankAccountType\&quot;:null,\&quot;pii_DefaultOutboundBankAccountName\&quot;:null,\&quot;pii_DefaultOutboundBankAccountNumber\&quot;:null,\&quot;pii_DefaultOutboundBankContact\&quot;:null,\&quot;pii_DefaultOutboundBankName\&quot;:null,\&quot;pii_DefaultOutboundBankContactPhoneNumber\&quot;:null,\&quot;pii_DefaultOutboundBankFaxNumber\&quot;:null,\&quot;pii_DefaultOutboundBankBranchName\&quot;:null,\&quot;pii_CurrentAddressCountry\&quot;:null,\&quot;CurrentAddressType\&quot;:null,\&quot;pii_SecondaryAddressCountry\&quot;:null,\&quot;SecondaryAddressType\&quot;:null,\&quot;TaxStatus\&quot;:null,\&quot;pii_SecondaryAddressCounty\&quot;:null,\&quot;pii_CurrentAddressCounty\&quot;:null,\&quot;InternalEntityTypeCode\&quot;:null,\&quot;ConfidentialHandling\&quot;:null,\&quot;InternalCustomer\&quot;:null,\&quot;ApprovedDirectLiabilityLimit\&quot;:null,\&quot;ApprovedTotalLiabilityLimit\&quot;:null,\&quot;LimitsApprovedDate\&quot;:null,\&quot;DefaultInboundPaymentCurrencyType\&quot;:null,\&quot;DefaultOutboundPaymentCurrencyType\&quot;:null,\&quot;DefaultInboundPaymentCode\&quot;:null,\&quot;DefaultOutboundPaymentCode\&quot;:null,\&quot;DefaultInboundPaymentSpecialInstructions\&quot;:null,\&quot;DefaultOutboundPaymentSpecialInstructions\&quot;:null,\&quot;pii_PreviousAddressCountry\&quot;:null,\&quot;PreviousAddressType\&quot;:null,\&quot;CurrentAddressSince\&quot;:null,\&quot;PreviousAddressSince\&quot;:null,\&quot;SecondaryAddressSince\&quot;:null,\&quot;ServicingUnitSection\&quot;:null,\&quot;InvestorIndicator\&quot;:null,\&quot;PDValue\&quot;:null,\&quot;LGDValue\&quot;:null,\&quot;CurrentAddressIdentifier\&quot;:null,\&quot;CurrentAddressName1\&quot;:null,\&quot;SecondaryAddressIdentifier\&quot;:null,\&quot;SecondaryAddressName1\&quot;:null,\&quot;DefaultInboundCashOffsetType\&quot;:null,\&quot;DefaultOutboundCashOffsetType\&quot;:null,\&quot;DefaultInboundSwiftIdentifier\&quot;:null,\&quot;DefaultOutboundSwiftIdentifier\&quot;:null,\&quot;ExternalRatingType\&quot;:null,\&quot;FullName2\&quot;:null,\&quot;FullName3\&quot;:null,\&quot;SortName\&quot;:null,\&quot;DefaultCurrencyType\&quot;:null,\&quot;WatchStatusIndicator\&quot;:null,\&quot;TotalGuarantees\&quot;:null,\&quot;WatchListDate\&quot;:null,\&quot;DispositionType\&quot;:null,\&quot;PublishedName\&quot;:null,\&quot;BorrowerIndicatorFlag\&quot;:null,\&quot;WatchListReason\&quot;:null,\&quot;CurrentAddressName2\&quot;:null,\&quot;CurrentAddressName3\&quot;:null,\&quot;pii_CurrentAddress2\&quot;:null,\&quot;pii_CurrentAddress3\&quot;:null,\&quot;pii_CurrentAddress4\&quot;:null,\&quot;pii_CurrentAddressTelexNumber\&quot;:null,\&quot;pii_CurrentAddressSwiftIdentifier\&quot;:null,\&quot;SecurityDesignation\&quot;:null,\&quot;SecondaryAddressName2\&quot;:null,\&quot;SecondaryAddressName3\&quot;:null,\&quot;pii_SecondaryAddress2\&quot;:null,\&quot;pii_SecondaryAddress3\&quot;:null,\&quot;pii_SecondaryAddress4\&quot;:null,\&quot;pii_SecondaryAddressPhone1\&quot;:null,\&quot;pii_SecondaryAddressPhone2\&quot;:null,\&quot;pii_SecondaryAddressFaxNumber\&quot;:null,\&quot;pii_SecondaryAddressTelexNumber\&quot;:null,\&quot;pii_SecondaryAddressSwiftIdentifier\&quot;:null,\&quot;pii_SecondaryAddressEmailAddress\&quot;:null,\&quot;InternalOrganisation\&quot;:null,\&quot;LinkedBackgroundReports\&quot;:[],\&quot;LinkedLegalEntityAliases\&quot;:[],\&quot;Comments\&quot;:[],\&quot;CountrySubRegions\&quot;:[],\&quot;Locations\&quot;:[],\&quot;Users\&quot;:[],\&quot;LinkedRelationships\&quot;:[],\&quot;Industries\&quot;:[],\&quot;Contacts\&quot;:[],\&quot;CountryOfIncorpOrResidence\&quot;:\&quot;Indonesia\&quot;,\&quot;BusinessEntityType\&quot;:null,\&quot;DoingBusinessAs\&quot;:null,\&quot;CustomerSegment\&quot;:\&quot;Corporate\&quot;,\&quot;LMSID\&quot;:null,\&quot;customerQuadrant\&quot;:null,\&quot;portfolioNeeded\&quot;:null,\&quot;customerRemarks\&quot;:null,\&quot;LinkedPortfolios\&quot;:[{\&quot;LegalEntityRecordId\&quot;:\&quot;06eb877b-db47-4736-8f5b-6149a04ceae3\&quot;,\&quot;PortfolioRecordId\&quot;:\&quot;15592359\&quot;,\&quot;RelationshipType\&quot;:\&quot;Primary Portfolio\&quot;,\&quot;PortfolioDataSource\&quot;:null,\&quot;LegalEntityDataSource\&quot;:null,\&quot;PortfolioName\&quot;:\&quot;Manager Testing\&quot;,\&quot;PortfolioType\&quot;:\&quot;Portfolio\&quot;,\&quot;PortfolioDescription\&quot;:\&quot;Sample Portfolio\&quot;,\&quot;EffectiveRoot\&quot;:{\&quot;AncestorLevel\&quot;:3,\&quot;AncestorPortfolioRecordId\&quot;:\&quot;7887312\&quot;,\&quot;AncestorPortfolioName\&quot;:\&quot;TestPortfolio\&quot;,\&quot;AncestorCustomAttribute\&quot;:{\&quot;Integration\&quot;:{\&quot;ServicingSystem\&quot;:\&quot;NA\&quot;,\&quot;CLOOpportunity\&quot;:false,\&quot;Dynamics\&quot;:false,\&quot;IntelligentKnowledgeCenter\&quot;:false,\&quot;Salesforce\&quot;:false},\&quot;AppRegion\&quot;:\&quot;US\&quot;,\&quot;PrimaryCurrencyISO\&quot;:\&quot;USD\&quot;,\&quot;ApplicationWithdrawTimer\&quot;:\&quot;P5D\&quot;,\&quot;ApplicationREGBWaitTimer\&quot;:\&quot;P1D\&quot;,\&quot;CovenantLeadDays\&quot;:90,\&quot;TestAttribute\&quot;:\&quot;A1\&quot;}}}]}],\&quot;exchangeRateDate\&quot;:null,\&quot;segment\&quot;:\&quot;Corporate\&quot;,\&quot;PortfolioOwner\&quot;:\&quot;TestUser1 BNI\&quot;,\&quot;exchangeCurrency\&quot;:null,\&quot;DefaultCurrencyISO\&quot;:\&quot;IDR\&quot;,\&quot;RecordId\&quot;:\&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a\&quot;,\&quot;currencyConversionRate\&quot;:null,\&quot;Portfolios\&quot;:[{\&quot;PortfolioRecordId\&quot;:\&quot;15592359\&quot;,\&quot;PortfolioName\&quot;:\&quot;Manager Testing\&quot;,\&quot;PortfolioType\&quot;:\&quot;Portfolio\&quot;,\&quot;EffectiveRoot\&quot;:{\&quot;AncestorLevel\&quot;:3,\&quot;AncestorPortfolioRecordId\&quot;:\&quot;7887312\&quot;,\&quot;AncestorPortfolioName\&quot;:\&quot;TestPortfolio\&quot;,\&quot;AncestorCustomAttribute\&quot;:{\&quot;Integration\&quot;:{\&quot;ServicingSystem\&quot;:\&quot;NA\&quot;,\&quot;CLOOpportunity\&quot;:false,\&quot;Dynamics\&quot;:false,\&quot;IntelligentKnowledgeCenter\&quot;:false,\&quot;Salesforce\&quot;:false},\&quot;AppRegion\&quot;:\&quot;US\&quot;,\&quot;PrimaryCurrencyISO\&quot;:\&quot;USD\&quot;,\&quot;ApplicationWithdrawTimer\&quot;:\&quot;P5D\&quot;,\&quot;ApplicationREGBWaitTimer\&quot;:\&quot;P1D\&quot;,\&quot;CovenantLeadDays\&quot;:90,\&quot;TestAttribute\&quot;:\&quot;A1\&quot;}}}]},\&quot;DisplayDivisorLabel\&quot;:\&quot;(k)\&quot;,\&quot;candidateUserIds\&quot;:\&quot;TESTUSER1.BNI@CLO.COM,,,,,,\&quot;,\&quot;googleMapKey\&quot;:\&quot;AIzaSyAw1r9V3DrFm8QQvjzu8m6PFeq5gKQY27c\&quot;,\&quot;dealNumber\&quot;:\&quot;1204\&quot;,\&quot;Approval_TAE\&quot;:0,\&quot;name\&quot;:\&quot;Corporate Test Component | Deal No.BNI-GRP-B31E7E-1204\&quot;,\&quot;Collection\&quot;:\&quot;application\&quot;,\&quot;stageCollateralCount\&quot;:0,\&quot;taskName\&quot;:\&quot;\&quot;,\&quot;baseURL_FE_Omni\&quot;:\&quot;api/omniproxy\&quot;,\&quot;policyExceptionsCount\&quot;:0,\&quot;CommentsByRM\&quot;:null,\&quot;CRED_D007\&quot;:[{\&quot;RequiredStage\&quot;:\&quot;Application\&quot;,\&quot;Category_\&quot;:\&quot;Application Info.\&quot;,\&quot;DocumentStorageType\&quot;:\&quot;\&quot;,\&quot;AppliesTo\&quot;:\&quot;Application\&quot;,\&quot;Type_\&quot;:\&quot;Approved Call Memo\&quot;,\&quot;SystemGenerated\&quot;:true}],\&quot;DisplayDivisor\&quot;:1000,\&quot;isCancelledByCommittee\&quot;:false,\&quot;googleMapUrl\&quot;:\&quot;https://www.google.com/maps/embed/v1\&quot;,\&quot;facilityDocGen\&quot;:false,\&quot;applicationStartDate\&quot;:\&quot;2025-03-18\&quot;,\&quot;collateralCount\&quot;:0,\&quot;applicationEndDate\&quot;:\&quot;\&quot;,\&quot;Task_Permission_1\&quot;:\&quot;Task_Permission_1\&quot;,\&quot;PrimaryCurrencyISO\&quot;:\&quot;IDR\&quot;,\&quot;docCustomerId\&quot;:null,\&quot;creditDOB\&quot;:{\&quot;__definitionId\&quot;:\&quot;DOE-6b0c503a-03dd-11f0-bc6a-000d3a04bee4\&quot;,\&quot;__definitionKey\&quot;:\&quot;CRED_D005\&quot;,\&quot;ReferenceId\&quot;:\&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a\&quot;,\&quot;State\&quot;:\&quot;Application\&quot;,\&quot;Data\&quot;:{\&quot;name\&quot;:\&quot;Corporate Test Component | Deal No.BNI-GRP-B31E7E-1204\&quot;,\&quot;CustomerGroupName\&quot;:\&quot;Corporate Test Component\&quot;,\&quot;CustomerGroupNo\&quot;:\&quot;BNI-GRP-B31E7E\&quot;,\&quot;CustomerGroupRecordId\&quot;:\&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a\&quot;,\&quot;dealNumber\&quot;:\&quot;1204\&quot;,\&quot;TAE\&quot;:0,\&quot;caseId\&quot;:\&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4\&quot;,\&quot;assigneeId\&quot;:\&quot;TESTUSER1.BNI@CLO.COM\&quot;,\&quot;assigneeDisplayName\&quot;:\&quot;TestUser1 BNI\&quot;,\&quot;applicationType\&quot;:\&quot;Baru\&quot;,\&quot;targetCompletionDate\&quot;:null,\&quot;segment\&quot;:\&quot;Corporate\&quot;,\&quot;appRegion\&quot;:\&quot;US\&quot;,\&quot;PrimaryCurrencyISO\&quot;:\&quot;IDR\&quot;,\&quot;dealTeam\&quot;:false,\&quot;CreditAnalyst\&quot;:\&quot;\&quot;,\&quot;PortfolioManager\&quot;:\&quot;\&quot;,\&quot;CreditReviewer\&quot;:\&quot;\&quot;,\&quot;CreditReviewer2\&quot;:\&quot;\&quot;,\&quot;Syndications\&quot;:\&quot;\&quot;,\&quot;Legal\&quot;:\&quot;\&quot;,\&quot;ownerId\&quot;:\&quot;\&quot;,\&quot;appName\&quot;:\&quot;Corporate Test Component | Deal No.BNI-GRP-B31E7E-1204\&quot;,\&quot;policyExemptions\&quot;:false,\&quot;applicationRegion\&quot;:\&quot;US\&quot;,\&quot;LVR\&quot;:0,\&quot;currentTAE\&quot;:0,\&quot;regBStatus\&quot;:\&quot;\&quot;,\&quot;regBTimer\&quot;:0,\&quot;crmApplicationId\&quot;:\&quot;\&quot;,\&quot;crmApplicationName\&quot;:\&quot;Corporate Test Component new loan opportunity\&quot;,\&quot;enabledCRM\&quot;:\&quot;None\&quot;,\&quot;ManualDecision\&quot;:\&quot;\&quot;,\&quot;DeclineReason1\&quot;:\&quot;\&quot;,\&quot;DeclineReason2\&quot;:\&quot;\&quot;,\&quot;DeclineReason3\&quot;:\&quot;\&quot;,\&quot;CommentsByRM\&quot;:\&quot;\&quot;,\&quot;OtherDeclineComments\&quot;:\&quot;\&quot;,\&quot;IsRegB\&quot;:false,\&quot;ActionTaken\&quot;:\&quot;\&quot;},\&quot;Id\&quot;:\&quot;73ba6dd5-d3ef-4c1a-b25d-7d02a4dba5e6\&quot;,\&quot;__flowableVariableType\&quot;:\&quot;flowableDataObject\&quot;},\&quot;IssueDeclineLetterDocument\&quot;:null,\&quot;CustomerGroupNo\&quot;:\&quot;BNI-GRP-B31E7E\&quot;,\&quot;creditApplicationCaseId\&quot;:\&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4\&quot;,\&quot;approvalConditionCount\&quot;:0,\&quot;CustomerGroupName\&quot;:\&quot;Corporate Test Component\&quot;,\&quot;SyndicatedFacility\&quot;:false,\&quot;startUserId\&quot;:\&quot;TESTUSER1.BNI@CLO.COM\&quot;,\&quot;nextReviewDate\&quot;:\&quot;\&quot;,\&quot;WithdrawalComments\&quot;:null,\&quot;LELYes\&quot;:false,\&quot;creditReOpenCount\&quot;:0,\&quot;checklistTask1\&quot;:\&quot;TSK-bb24a0f8-03e1-11f0-bc6a-000d3a04bee4\&quot;,\&quot;applicationReferenceId\&quot;:\&quot;73ba6dd5-d3ef-4c1a-b25d-7d02a4dba5e6\&quot;,\&quot;startTime\&quot;:\&quot;2025-03-18T10:04:54.577Z\&quot;,\&quot;LELNo\&quot;:false,\&quot;isApproved\&quot;:false,\&quot;corpCredInitCompleted\&quot;:true,\&quot;isRejectedByCommittee\&quot;:false,\&quot;stageFacilityCount\&quot;:0,\&quot;owner\&quot;:\&quot;TESTUSER1.BNI@CLO.COM\&quot;,\&quot;googleApiKey\&quot;:\&quot;AIzaSyBtQIebvdI_GlLgavtqmySE-Iyn0vtNPv4\&quot;,\&quot;facilitiesCount\&quot;:0,\&quot;singleDocRequiredStage\&quot;:null,\&quot;errorMessage\&quot;:null,\&quot;CaseId\&quot;:\&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4\&quot;,\&quot;activationConditionCount\&quot;:0,\&quot;borrowerReviewList\&quot;:[],\&quot;OtherDeclineComments\&quot;:null,\&quot;assigneeId\&quot;:\&quot;TESTUSER1.BNI@CLO.COM\&quot;,\&quot;memoDocument\&quot;:false,\&quot;isWithdrawn\&quot;:false,\&quot;DeclineReason2\&quot;:null,\&quot;DeclineReason3\&quot;:null,\&quot;servicingSystem\&quot;:\&quot;NA\&quot;,\&quot;importTryCount\&quot;:1,\&quot;stages\&quot;:[{\&quot;stage\&quot;:\&quot;Application\&quot;,\&quot;status\&quot;:\&quot;1\&quot;,\&quot;stageStartDate\&quot;:\&quot;2025-03-18T10:04:56.760Z\&quot;,\&quot;stageEndDate\&quot;:null},{\&quot;stage\&quot;:\&quot;Underwriting\&quot;,\&quot;status\&quot;:\&quot;0\&quot;,\&quot;stageStartDate\&quot;:null,\&quot;stageEndDate\&quot;:null},{\&quot;stage\&quot;:\&quot;Credit Decisioning\&quot;,\&quot;status\&quot;:\&quot;0\&quot;,\&quot;stageStartDate\&quot;:null,\&quot;stageEndDate\&quot;:null},{\&quot;stage\&quot;:\&quot;Documentation\&quot;,\&quot;status\&quot;:\&quot;0\&quot;,\&quot;stageStartDate\&quot;:null,\&quot;stageEndDate\&quot;:null},{\&quot;stage\&quot;:\&quot;Closing\&quot;,\&quot;status\&quot;:\&quot;0\&quot;,\&quot;stageStartDate\&quot;:null,\&quot;stageEndDate\&quot;:null}],\&quot;FXRateSource\&quot;:\&quot;CLO\&quot;,\&quot;baseURL_FE\&quot;:\&quot;api/omniproxy\&quot;,\&quot;DeclineReason1\&quot;:null,\&quot;approvalLevel\&quot;:\&quot;\&quot;,\&quot;baseURL_BE\&quot;:\&quot;api/omniproxy\&quot;},\&quot;creditReOpenCount\&quot;:0,\&quot;checklistTask1\&quot;:\&quot;TSK-bb24a0f8-03e1-11f0-bc6a-000d3a04bee4\&quot;,\&quot;applicationReferenceId\&quot;:\&quot;73ba6dd5-d3ef-4c1a-b25d-7d02a4dba5e6\&quot;,\&quot;LELNo\&quot;:false,\&quot;isApproved\&quot;:false,\&quot;corpCredInitCompleted\&quot;:true,\&quot;isRejectedByCommittee\&quot;:false,\&quot;stageFacilityCount\&quot;:0,\&quot;owner\&quot;:\&quot;TESTUSER1.BNI@CLO.COM\&quot;,\&quot;googleApiKey\&quot;:\&quot;AIzaSyBtQIebvdI_GlLgavtqmySE-Iyn0vtNPv4\&quot;,\&quot;facilitiesCount\&quot;:0,\&quot;singleDocRequiredStage\&quot;:null,\&quot;errorMessage\&quot;:null,\&quot;CaseId\&quot;:\&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4\&quot;,\&quot;activationConditionCount\&quot;:0,\&quot;borrowerReviewList\&quot;:[],\&quot;OtherDeclineComments\&quot;:null,\&quot;assigneeId\&quot;:\&quot;TESTUSER1.BNI@CLO.COM\&quot;,\&quot;memoDocument\&quot;:false,\&quot;isWithdrawn\&quot;:false,\&quot;DeclineReason2\&quot;:null,\&quot;DeclineReason3\&quot;:null,\&quot;servicingSystem\&quot;:\&quot;NA\&quot;,\&quot;importTryCount\&quot;:1,\&quot;stages\&quot;:[{\&quot;stage\&quot;:\&quot;Application\&quot;,\&quot;status\&quot;:\&quot;1\&quot;,\&quot;stageStartDate\&quot;:\&quot;2025-03-18T10:04:56.760Z\&quot;,\&quot;stageEndDate\&quot;:null},{\&quot;stage\&quot;:\&quot;Underwriting\&quot;,\&quot;status\&quot;:\&quot;0\&quot;,\&quot;stageStartDate\&quot;:null,\&quot;stageEndDate\&quot;:null},{\&quot;stage\&quot;:\&quot;Credit Decisioning\&quot;,\&quot;status\&quot;:\&quot;0\&quot;,\&quot;stageStartDate\&quot;:null,\&quot;stageEndDate\&quot;:null},{\&quot;stage\&quot;:\&quot;Documentation\&quot;,\&quot;status\&quot;:\&quot;0\&quot;,\&quot;stageStartDate\&quot;:null,\&quot;stageEndDate\&quot;:null},{\&quot;stage\&quot;:\&quot;Closing\&quot;,\&quot;status\&quot;:\&quot;0\&quot;,\&quot;stageStartDate\&quot;:null,\&quot;stageEndDate\&quot;:null}],\&quot;self\&quot;:{\&quot;startUserId\&quot;:\&quot;TESTUSER1.BNI@CLO.COM\&quot;,\&quot;name\&quot;:\&quot;Corporate Test Component | Deal No.BNI-GRP-B31E7E-1204\&quot;,\&quot;startTime\&quot;:\&quot;2025-03-18T10:04:54.577Z\&quot;,\&quot;id\&quot;:\&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4\&quot;},\&quot;FXRateSource\&quot;:\&quot;CLO\&quot;,\&quot;baseURL_FE\&quot;:\&quot;api/omniproxy\&quot;,\&quot;DeclineReason1\&quot;:null,\&quot;approvalLevel\&quot;:\&quot;\&quot;,\&quot;baseURL_BE\&quot;:\&quot;api/omniproxy\&quot;}&quot;,&quot;creditDOB&quot;:{&quot;__definitionId&quot;:&quot;DOE-6b0c503a-03dd-11f0-bc6a-000d3a04bee4&quot;,&quot;__definitionKey&quot;:&quot;CRED_D005&quot;,&quot;ReferenceId&quot;:&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a&quot;,&quot;State&quot;:&quot;Application&quot;,&quot;Data&quot;:{&quot;name&quot;:&quot;Corporate Test Component | Deal No.BNI-GRP-B31E7E-1204&quot;,&quot;CustomerGroupName&quot;:&quot;Corporate Test Component&quot;,&quot;CustomerGroupNo&quot;:&quot;BNI-GRP-B31E7E&quot;,&quot;CustomerGroupRecordId&quot;:&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a&quot;,&quot;dealNumber&quot;:&quot;1204&quot;,&quot;TAE&quot;:0,&quot;caseId&quot;:&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4&quot;,&quot;assigneeId&quot;:&quot;TESTUSER1.BNI@CLO.COM&quot;,&quot;assigneeDisplayName&quot;:&quot;TestUser1 BNI&quot;,&quot;applicationType&quot;:&quot;Baru&quot;,&quot;targetCompletionDate&quot;:null,&quot;segment&quot;:&quot;Corporate&quot;,&quot;appRegion&quot;:&quot;US&quot;,&quot;PrimaryCurrencyISO&quot;:&quot;IDR&quot;,&quot;dealTeam&quot;:false,&quot;CreditAnalyst&quot;:&quot;&quot;,&quot;PortfolioManager&quot;:&quot;&quot;,&quot;CreditReviewer&quot;:&quot;&quot;,&quot;CreditReviewer2&quot;:&quot;&quot;,&quot;Syndications&quot;:&quot;&quot;,&quot;Legal&quot;:&quot;&quot;,&quot;ownerId&quot;:&quot;&quot;,&quot;appName&quot;:&quot;Corporate Test Component | Deal No.BNI-GRP-B31E7E-1204&quot;,&quot;policyExemptions&quot;:false,&quot;applicationRegion&quot;:&quot;US&quot;,&quot;LVR&quot;:0,&quot;currentTAE&quot;:0,&quot;regBStatus&quot;:&quot;&quot;,&quot;regBTimer&quot;:0,&quot;crmApplicationId&quot;:&quot;&quot;,&quot;crmApplicationName&quot;:&quot;Corporate Test Component new loan opportunity&quot;,&quot;enabledCRM&quot;:&quot;None&quot;,&quot;ManualDecision&quot;:&quot;&quot;,&quot;DeclineReason1&quot;:&quot;&quot;,&quot;DeclineReason2&quot;:&quot;&quot;,&quot;DeclineReason3&quot;:&quot;&quot;,&quot;CommentsByRM&quot;:&quot;&quot;,&quot;OtherDeclineComments&quot;:&quot;&quot;,&quot;IsRegB&quot;:false,&quot;ActionTaken&quot;:&quot;&quot;},&quot;Id&quot;:&quot;73ba6dd5-d3ef-4c1a-b25d-7d02a4dba5e6&quot;,&quot;__flowableVariableType&quot;:&quot;flowableDataObject&quot;},&quot;IssueDeclineLetterDocument&quot;:null,&quot;CustomerGroupNo&quot;:&quot;BNI-GRP-B31E7E&quot;,&quot;creditApplicationCaseId&quot;:&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4&quot;,&quot;approvalConditionCount&quot;:0,&quot;CustomerGroupName&quot;:&quot;Corporate Test Component&quot;,&quot;SyndicatedFacility&quot;:false,&quot;nextReviewDate&quot;:&quot;&quot;,&quot;WithdrawalComments&quot;:null,&quot;LELYes&quot;:false,&quot;root&quot;:{&quot;exception&quot;:null,&quot;CustomerGroupRecordId&quot;:&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a&quot;,&quot;WithdrawalLetterDetails&quot;:null,&quot;initiator&quot;:&quot;TESTUSER1.BNI@CLO.COM&quot;,&quot;Regulatory&quot;:{&quot;US&quot;:&quot;false&quot;},&quot;covenantCount&quot;:0,&quot;baseURL_Optimist_FE&quot;:&quot;https://vwmazbnidevopt.dev.fiscloudservices.com/Optimist8_v4/&quot;,&quot;googleApiUrl&quot;:&quot;https://maps.googleapis.com/maps/api&quot;,&quot;DisplayPrecision&quot;:0,&quot;singleDocName&quot;:null,&quot;applicationStatus&quot;:&quot;In Progress&quot;,&quot;isDecisioned&quot;:false,&quot;notActivationCovenantCount&quot;:0,&quot;customerReOpenCount&quot;:0,&quot;isWithdrawnBttnDisabled&quot;:true,&quot;segment&quot;:&quot;Corporate&quot;,&quot;ManualDecision&quot;:null,&quot;GeneralActivity&quot;:true,&quot;id&quot;:&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4&quot;,&quot;conditionCount&quot;:0,&quot;createSingleDoc&quot;:false,&quot;QATesting&quot;:false,&quot;dealSetupComplete&quot;:true,&quot;dealSetup&quot;:&quot;TSK-71ef9708-03e0-11f0-bc6a-000d3a04bee4&quot;,&quot;LegalEntityGroup&quot;:{&quot;Description&quot;:null,&quot;DefaultLanguage&quot;:&quot;English&quot;,&quot;ParentRecordId&quot;:null,&quot;ChildLegalEntityGroups&quot;:[],&quot;Comments&quot;:[{&quot;Id&quot;:&quot;2728720f-2b3f-4451-9e9b-076ed6e5dec2&quot;,&quot;EntityType&quot;:&quot;LegalEntityGroup&quot;,&quot;Type&quot;:&quot;Notes&quot;,&quot;Comment&quot;:null}],&quot;Users&quot;:[{&quot;Id&quot;:null,&quot;Type&quot;:&quot;Relationship Manager&quot;,&quot;RelationshipType&quot;:&quot;Primary&quot;,&quot;Description&quot;:&quot;TestUser1 BNI&quot;,&quot;UserEmailId&quot;:&quot;TESTUSER1.BNI@CLO.COM&quot;,&quot;Name&quot;:&quot;TestUser1 BNI&quot;}],&quot;LinkedLegalEntityGroupAliases&quot;:[],&quot;Name&quot;:&quot;Corporate Test Component&quot;,&quot;Type&quot;:&quot;Borrowing Group&quot;,&quot;ConfidentialHandlingFlag&quot;:false,&quot;ParentLegalEntityGroup&quot;:null,&quot;CustomerGroupID&quot;:&quot;BNI-GRP-B31E7E&quot;,&quot;LinkedLegalEntities&quot;:[{&quot;RecordId&quot;:&quot;06eb877b-db47-4736-8f5b-6149a04ceae3&quot;,&quot;Description&quot;:null,&quot;EntityStatus&quot;:null,&quot;InternalEntityType&quot;:&quot;Company&quot;,&quot;LegalForm&quot;:&quot;PT&quot;,&quot;CustomerID&quot;:&quot;BNI-CUS-E8C35A&quot;,&quot;pii_InternalRating&quot;:null,&quot;pii_InternalRatingDate&quot;:null,&quot;ShortName&quot;:&quot;Test 234 New&quot;,&quot;IndustryCode&quot;:null,&quot;IndustryDesc&quot;:null,&quot;pii_CreditScore&quot;:null,&quot;pii_CreditScoreDate&quot;:null,&quot;Title&quot;:null,&quot;FirstName&quot;:null,&quot;MiddleName&quot;:null,&quot;LastName&quot;:null,&quot;Suffix&quot;:null,&quot;FullName&quot;:&quot;Test 234 New&quot;,&quot;AssignedPrimaryPortfolio&quot;:&quot;Manager Testing&quot;,&quot;PortfolioOwner&quot;:null,&quot;RelationshipSince&quot;:null,&quot;pii_IDReference&quot;:null,&quot;MaritalStatus&quot;:null,&quot;pii_DateOfBirth&quot;:null,&quot;EmploymentStatus&quot;:null,&quot;CurrentEmployer&quot;:null,&quot;TypeOfBusiness&quot;:null,&quot;JobTitle&quot;:null,&quot;pii_IncomeEmployment&quot;:null,&quot;pii_IncomeOther&quot;:null,&quot;pii_IncomeTotal&quot;:null,&quot;IncorporationDate&quot;:null,&quot;ResolutionDate&quot;:null,&quot;NoOfSigners&quot;:null,&quot;NoOfEmployees&quot;:null,&quot;CurrentOwnershipDate&quot;:null,&quot;TotalSalesInd&quot;:null,&quot;TotalSalesDate&quot;:null,&quot;RegOType&quot;:null,&quot;PriorBankruptcyDate&quot;:null,&quot;OutstandingObligationAmount&quot;:null,&quot;pii_TrustName&quot;:null,&quot;OutOfMarketFinancing&quot;:null,&quot;LastReviewDate&quot;:null,&quot;NextReviewDate&quot;:null,&quot;LEI&quot;:null,&quot;EntityType&quot;:&quot;Company&quot;,&quot;RegulatoryEntityType&quot;:null,&quot;TradingFlag&quot;:null,&quot;Gender&quot;:null,&quot;Spouse&quot;:null,&quot;NoOfDependents&quot;:null,&quot;ReviewFrequency&quot;:null,&quot;TotalSalesGroup&quot;:null,&quot;TotalSalesGroupCurrencyISO&quot;:null,&quot;TotalSalesIndCurrencyISO&quot;:null,&quot;TotalAssetsGroup&quot;:null,&quot;TotalAssetsGroupCurrencyISO&quot;:null,&quot;TotalAssetsInd&quot;:null,&quot;TotalAssetsDate&quot;:null,&quot;TotalAssetsIndCurrencyISO&quot;:null,&quot;RegulatedFlag&quot;:null,&quot;FinancialEntityFlag&quot;:null,&quot;RegulatoryCCRFlag&quot;:null,&quot;RegulatoryCRFlag&quot;:null,&quot;RegulatoryCVAFlag&quot;:null,&quot;BusinessStatus&quot;:null,&quot;BusinessStatusDate&quot;:null,&quot;SovereignTreatmentFlag&quot;:null,&quot;QualifiedCCPFlag&quot;:null,&quot;SMEFlag&quot;:null,&quot;QualifiedMDBFlag&quot;:null,&quot;EquityScalingFlag&quot;:null,&quot;OverrideRiskWeight&quot;:null,&quot;IdiosyncraticWeight&quot;:null,&quot;LegalJurisdiction&quot;:null,&quot;RegulatoryJurisdiction&quot;:null,&quot;InstitutionalProtectionFlag&quot;:null,&quot;DefunctDate&quot;:null,&quot;pii_PrimaryIdentifier&quot;:&quot;123456789009811&quot;,&quot;pii_PrimaryIdentifierType&quot;:null,&quot;pii_PrimaryIDDateOfIssue&quot;:null,&quot;pii_PrimaryIDDateOfExpiration&quot;:null,&quot;DBA&quot;:null,&quot;EmploymentSince&quot;:null,&quot;OutstandingObligationAmountCurrencyISO&quot;:null,&quot;OutstandingObligationDate&quot;:null,&quot;OOMarketFlag&quot;:null,&quot;CustomerClassification&quot;:null,&quot;Website&quot;:null,&quot;pii_Race&quot;:null,&quot;pii_Ethnicity&quot;:null,&quot;CitizenshipStatus&quot;:null,&quot;FATCAStatus&quot;:null,&quot;FATCACompliant&quot;:null,&quot;ConfidentialHandlingFlag&quot;:null,&quot;InternalCustomerFlag&quot;:null,&quot;DefaultLanguage&quot;:null,&quot;SecondaryIDType&quot;:null,&quot;pii_SecondaryIDReference&quot;:null,&quot;SecondaryIDDateOfIssue&quot;:null,&quot;SecondaryIDDateOfExpiration&quot;:null,&quot;pii_PhoneNumber1&quot;:null,&quot;pii_ExtensionNumber1&quot;:null,&quot;PhoneType1&quot;:null,&quot;pii_PhoneNumber2&quot;:null,&quot;pii_ExtensionNumber2&quot;:null,&quot;PhoneType2&quot;:null,&quot;pii_EmailAddress&quot;:null,&quot;pii_FaxNumber&quot;:null,&quot;RegOFlag&quot;:null,&quot;PriorBankruptcyFlag&quot;:null,&quot;OutstandingLiensFlag&quot;:null,&quot;PersonalTrustFlag&quot;:null,&quot;PrimaryContact&quot;:null,&quot;ReviewFrequencyType&quot;:null,&quot;EmployerAddress&quot;:null,&quot;EmployerCity&quot;:null,&quot;EmployerStateProvince&quot;:null,&quot;EmployerPostalCode&quot;:null,&quot;pii_CurrentAddress&quot;:null,&quot;pii_CurrentAddressCity&quot;:null,&quot;pii_CurrentAddressStateProvince&quot;:null,&quot;pii_CurrentAddressPostalCode&quot;:null,&quot;pii_SecondaryAddress&quot;:null,&quot;pii_SecondaryAddressCity&quot;:null,&quot;pii_SecondaryAddressStateProvince&quot;:null,&quot;pii_SecondaryAddressPostalCode&quot;:null,&quot;DefaultGLUnit&quot;:null,&quot;ServicingUnit&quot;:null,&quot;pii_DefaultInboundBankAddress&quot;:null,&quot;pii_DefaultInboundBankCity&quot;:null,&quot;pii_DefaultInboundBankStateProvince&quot;:null,&quot;pii_DefaultInboundBankPostalCode&quot;:null,&quot;pii_DefaultInboundBankCountry&quot;:null,&quot;pii_DefaultInboundABATransitNumber&quot;:null,&quot;pii_DefaultInboundBankAccountType&quot;:null,&quot;pii_DefaultInboundBankAccountName&quot;:null,&quot;pii_DefaultInboundBankAccountNumber&quot;:null,&quot;pii_DefaultInboundBankContact&quot;:null,&quot;pii_DefaultInboundBankName&quot;:null,&quot;pii_DefaultInboundBankContactPhoneNumber&quot;:null,&quot;pii_DefaultInboundBankFaxNumber&quot;:null,&quot;pii_DefaultInboundBankBranchName&quot;:null,&quot;pii_DefaultOutboundBankAddress&quot;:null,&quot;pii_DefaultOutboundBankCity&quot;:null,&quot;pii_DefaultOutboundBankStateProvince&quot;:null,&quot;pii_DefaultOutboundBankPostalCode&quot;:null,&quot;pii_DefaultOutboundBankCountry&quot;:null,&quot;pii_DefaultOutboundABATransitNumber&quot;:null,&quot;pii_DefaultOutboundBankAccountType&quot;:null,&quot;pii_DefaultOutboundBankAccountName&quot;:null,&quot;pii_DefaultOutboundBankAccountNumber&quot;:null,&quot;pii_DefaultOutboundBankContact&quot;:null,&quot;pii_DefaultOutboundBankName&quot;:null,&quot;pii_DefaultOutboundBankContactPhoneNumber&quot;:null,&quot;pii_DefaultOutboundBankFaxNumber&quot;:null,&quot;pii_DefaultOutboundBankBranchName&quot;:null,&quot;pii_CurrentAddressCountry&quot;:null,&quot;CurrentAddressType&quot;:null,&quot;pii_SecondaryAddressCountry&quot;:null,&quot;SecondaryAddressType&quot;:null,&quot;TaxStatus&quot;:null,&quot;pii_SecondaryAddressCounty&quot;:null,&quot;pii_CurrentAddressCounty&quot;:null,&quot;InternalEntityTypeCode&quot;:null,&quot;ConfidentialHandling&quot;:null,&quot;InternalCustomer&quot;:null,&quot;ApprovedDirectLiabilityLimit&quot;:null,&quot;ApprovedTotalLiabilityLimit&quot;:null,&quot;LimitsApprovedDate&quot;:null,&quot;DefaultInboundPaymentCurrencyType&quot;:null,&quot;DefaultOutboundPaymentCurrencyType&quot;:null,&quot;DefaultInboundPaymentCode&quot;:null,&quot;DefaultOutboundPaymentCode&quot;:null,&quot;DefaultInboundPaymentSpecialInstructions&quot;:null,&quot;DefaultOutboundPaymentSpecialInstructions&quot;:null,&quot;pii_PreviousAddressCountry&quot;:null,&quot;PreviousAddressType&quot;:null,&quot;CurrentAddressSince&quot;:null,&quot;PreviousAddressSince&quot;:null,&quot;SecondaryAddressSince&quot;:null,&quot;ServicingUnitSection&quot;:null,&quot;InvestorIndicator&quot;:null,&quot;PDValue&quot;:null,&quot;LGDValue&quot;:null,&quot;CurrentAddressIdentifier&quot;:null,&quot;CurrentAddressName1&quot;:null,&quot;SecondaryAddressIdentifier&quot;:null,&quot;SecondaryAddressName1&quot;:null,&quot;DefaultInboundCashOffsetType&quot;:null,&quot;DefaultOutboundCashOffsetType&quot;:null,&quot;DefaultInboundSwiftIdentifier&quot;:null,&quot;DefaultOutboundSwiftIdentifier&quot;:null,&quot;ExternalRatingType&quot;:null,&quot;FullName2&quot;:null,&quot;FullName3&quot;:null,&quot;SortName&quot;:null,&quot;DefaultCurrencyType&quot;:null,&quot;WatchStatusIndicator&quot;:null,&quot;TotalGuarantees&quot;:null,&quot;WatchListDate&quot;:null,&quot;DispositionType&quot;:null,&quot;PublishedName&quot;:null,&quot;BorrowerIndicatorFlag&quot;:null,&quot;WatchListReason&quot;:null,&quot;CurrentAddressName2&quot;:null,&quot;CurrentAddressName3&quot;:null,&quot;pii_CurrentAddress2&quot;:null,&quot;pii_CurrentAddress3&quot;:null,&quot;pii_CurrentAddress4&quot;:null,&quot;pii_CurrentAddressTelexNumber&quot;:null,&quot;pii_CurrentAddressSwiftIdentifier&quot;:null,&quot;SecurityDesignation&quot;:null,&quot;SecondaryAddressName2&quot;:null,&quot;SecondaryAddressName3&quot;:null,&quot;pii_SecondaryAddress2&quot;:null,&quot;pii_SecondaryAddress3&quot;:null,&quot;pii_SecondaryAddress4&quot;:null,&quot;pii_SecondaryAddressPhone1&quot;:null,&quot;pii_SecondaryAddressPhone2&quot;:null,&quot;pii_SecondaryAddressFaxNumber&quot;:null,&quot;pii_SecondaryAddressTelexNumber&quot;:null,&quot;pii_SecondaryAddressSwiftIdentifier&quot;:null,&quot;pii_SecondaryAddressEmailAddress&quot;:null,&quot;InternalOrganisation&quot;:null,&quot;LinkedBackgroundReports&quot;:[],&quot;LinkedLegalEntityAliases&quot;:[],&quot;Comments&quot;:[],&quot;CountrySubRegions&quot;:[],&quot;Locations&quot;:[],&quot;Users&quot;:[],&quot;LinkedRelationships&quot;:[],&quot;Industries&quot;:[],&quot;Contacts&quot;:[],&quot;CountryOfIncorpOrResidence&quot;:&quot;Indonesia&quot;,&quot;BusinessEntityType&quot;:null,&quot;DoingBusinessAs&quot;:null,&quot;CustomerSegment&quot;:&quot;Corporate&quot;,&quot;LMSID&quot;:null,&quot;customerQuadrant&quot;:null,&quot;portfolioNeeded&quot;:null,&quot;customerRemarks&quot;:null,&quot;LinkedPortfolios&quot;:[{&quot;LegalEntityRecordId&quot;:&quot;06eb877b-db47-4736-8f5b-6149a04ceae3&quot;,&quot;PortfolioRecordId&quot;:&quot;15592359&quot;,&quot;RelationshipType&quot;:&quot;Primary Portfolio&quot;,&quot;PortfolioDataSource&quot;:null,&quot;LegalEntityDataSource&quot;:null,&quot;PortfolioName&quot;:&quot;Manager Testing&quot;,&quot;PortfolioType&quot;:&quot;Portfolio&quot;,&quot;PortfolioDescription&quot;:&quot;Sample Portfolio&quot;,&quot;EffectiveRoot&quot;:{&quot;AncestorLevel&quot;:3,&quot;AncestorPortfolioRecordId&quot;:&quot;7887312&quot;,&quot;AncestorPortfolioName&quot;:&quot;TestPortfolio&quot;,&quot;AncestorCustomAttribute&quot;:{&quot;Integration&quot;:{&quot;ServicingSystem&quot;:&quot;NA&quot;,&quot;CLOOpportunity&quot;:false,&quot;Dynamics&quot;:false,&quot;IntelligentKnowledgeCenter&quot;:false,&quot;Salesforce&quot;:false},&quot;AppRegion&quot;:&quot;US&quot;,&quot;PrimaryCurrencyISO&quot;:&quot;USD&quot;,&quot;ApplicationWithdrawTimer&quot;:&quot;P5D&quot;,&quot;ApplicationREGBWaitTimer&quot;:&quot;P1D&quot;,&quot;CovenantLeadDays&quot;:90,&quot;TestAttribute&quot;:&quot;A1&quot;}}}]}],&quot;exchangeRateDate&quot;:null,&quot;segment&quot;:&quot;Corporate&quot;,&quot;PortfolioOwner&quot;:&quot;TestUser1 BNI&quot;,&quot;exchangeCurrency&quot;:null,&quot;DefaultCurrencyISO&quot;:&quot;IDR&quot;,&quot;RecordId&quot;:&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a&quot;,&quot;currencyConversionRate&quot;:null,&quot;Portfolios&quot;:[{&quot;PortfolioRecordId&quot;:&quot;15592359&quot;,&quot;PortfolioName&quot;:&quot;Manager Testing&quot;,&quot;PortfolioType&quot;:&quot;Portfolio&quot;,&quot;EffectiveRoot&quot;:{&quot;AncestorLevel&quot;:3,&quot;AncestorPortfolioRecordId&quot;:&quot;7887312&quot;,&quot;AncestorPortfolioName&quot;:&quot;TestPortfolio&quot;,&quot;AncestorCustomAttribute&quot;:{&quot;Integration&quot;:{&quot;ServicingSystem&quot;:&quot;NA&quot;,&quot;CLOOpportunity&quot;:false,&quot;Dynamics&quot;:false,&quot;IntelligentKnowledgeCenter&quot;:false,&quot;Salesforce&quot;:false},&quot;AppRegion&quot;:&quot;US&quot;,&quot;PrimaryCurrencyISO&quot;:&quot;USD&quot;,&quot;ApplicationWithdrawTimer&quot;:&quot;P5D&quot;,&quot;ApplicationREGBWaitTimer&quot;:&quot;P1D&quot;,&quot;CovenantLeadDays&quot;:90,&quot;TestAttribute&quot;:&quot;A1&quot;}}}]},&quot;DisplayDivisorLabel&quot;:&quot;(k)&quot;,&quot;candidateUserIds&quot;:&quot;TESTUSER1.BNI@CLO.COM,,,,,,&quot;,&quot;googleMapKey&quot;:&quot;AIzaSyAw1r9V3DrFm8QQvjzu8m6PFeq5gKQY27c&quot;,&quot;dealNumber&quot;:&quot;1204&quot;,&quot;Approval_TAE&quot;:0,&quot;name&quot;:&quot;Corporate Test Component | Deal No.BNI-GRP-B31E7E-1204&quot;,&quot;Collection&quot;:&quot;application&quot;,&quot;stageCollateralCount&quot;:0,&quot;taskName&quot;:&quot;&quot;,&quot;baseURL_FE_Omni&quot;:&quot;api/omniproxy&quot;,&quot;policyExceptionsCount&quot;:0,&quot;CommentsByRM&quot;:null,&quot;CRED_D007&quot;:[{&quot;RequiredStage&quot;:&quot;Application&quot;,&quot;Category_&quot;:&quot;Application Info.&quot;,&quot;DocumentStorageType&quot;:&quot;&quot;,&quot;AppliesTo&quot;:&quot;Application&quot;,&quot;Type_&quot;:&quot;Approved Call Memo&quot;,&quot;SystemGenerated&quot;:true}],&quot;DisplayDivisor&quot;:1000,&quot;isCancelledByCommittee&quot;:false,&quot;googleMapUrl&quot;:&quot;https://www.google.com/maps/embed/v1&quot;,&quot;facilityDocGen&quot;:false,&quot;applicationStartDate&quot;:&quot;2025-03-18&quot;,&quot;collateralCount&quot;:0,&quot;applicationEndDate&quot;:&quot;&quot;,&quot;Task_Permission_1&quot;:&quot;Task_Permission_1&quot;,&quot;PrimaryCurrencyISO&quot;:&quot;IDR&quot;,&quot;docCustomerId&quot;:null,&quot;creditDOB&quot;:{&quot;__definitionId&quot;:&quot;DOE-6b0c503a-03dd-11f0-bc6a-000d3a04bee4&quot;,&quot;__definitionKey&quot;:&quot;CRED_D005&quot;,&quot;ReferenceId&quot;:&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a&quot;,&quot;State&quot;:&quot;Application&quot;,&quot;Data&quot;:{&quot;name&quot;:&quot;Corporate Test Component | Deal No.BNI-GRP-B31E7E-1204&quot;,&quot;CustomerGroupName&quot;:&quot;Corporate Test Component&quot;,&quot;CustomerGroupNo&quot;:&quot;BNI-GRP-B31E7E&quot;,&quot;CustomerGroupRecordId&quot;:&quot;40c7fa1e-153f-4e8b-8848-b0aac026a02a&quot;,&quot;dealNumber&quot;:&quot;1204&quot;,&quot;TAE&quot;:0,&quot;caseId&quot;:&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4&quot;,&quot;assigneeId&quot;:&quot;TESTUSER1.BNI@CLO.COM&quot;,&quot;assigneeDisplayName&quot;:&quot;TestUser1 BNI&quot;,&quot;applicationType&quot;:&quot;Baru&quot;,&quot;targetCompletionDate&quot;:null,&quot;segment&quot;:&quot;Corporate&quot;,&quot;appRegion&quot;:&quot;US&quot;,&quot;PrimaryCurrencyISO&quot;:&quot;IDR&quot;,&quot;dealTeam&quot;:false,&quot;CreditAnalyst&quot;:&quot;&quot;,&quot;PortfolioManager&quot;:&quot;&quot;,&quot;CreditReviewer&quot;:&quot;&quot;,&quot;CreditReviewer2&quot;:&quot;&quot;,&quot;Syndications&quot;:&quot;&quot;,&quot;Legal&quot;:&quot;&quot;,&quot;ownerId&quot;:&quot;&quot;,&quot;appName&quot;:&quot;Corporate Test Component | Deal No.BNI-GRP-B31E7E-1204&quot;,&quot;policyExemptions&quot;:false,&quot;applicationRegion&quot;:&quot;US&quot;,&quot;LVR&quot;:0,&quot;currentTAE&quot;:0,&quot;regBStatus&quot;:&quot;&quot;,&quot;regBTimer&quot;:0,&quot;crmApplicationId&quot;:&quot;&quot;,&quot;crmApplicationName&quot;:&quot;Corporate Test Component new loan opportunity&quot;,&quot;enabledCRM&quot;:&quot;None&quot;,&quot;ManualDecision&quot;:&quot;&quot;,&quot;DeclineReason1&quot;:&quot;&quot;,&quot;DeclineReason2&quot;:&quot;&quot;,&quot;DeclineReason3&quot;:&quot;&quot;,&quot;CommentsByRM&quot;:&quot;&quot;,&quot;OtherDeclineComments&quot;:&quot;&quot;,&quot;IsRegB&quot;:false,&quot;ActionTaken&quot;:&quot;&quot;},&quot;Id&quot;:&quot;73ba6dd5-d3ef-4c1a-b25d-7d02a4dba5e6&quot;,&quot;__flowableVariableType&quot;:&quot;flowableDataObject&quot;},&quot;IssueDeclineLetterDocument&quot;:null,&quot;CustomerGroupNo&quot;:&quot;BNI-GRP-B31E7E&quot;,&quot;creditApplicationCaseId&quot;:&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4&quot;,&quot;approvalConditionCount&quot;:0,&quot;CustomerGroupName&quot;:&quot;Corporate Test Component&quot;,&quot;SyndicatedFacility&quot;:false,&quot;startUserId&quot;:&quot;TESTUSER1.BNI@CLO.COM&quot;,&quot;nextReviewDate&quot;:&quot;&quot;,&quot;WithdrawalComments&quot;:null,&quot;LELYes&quot;:false,&quot;creditReOpenCount&quot;:0,&quot;checklistTask1&quot;:&quot;TSK-bb24a0f8-03e1-11f0-bc6a-000d3a04bee4&quot;,&quot;applicationReferenceId&quot;:&quot;73ba6dd5-d3ef-4c1a-b25d-7d02a4dba5e6&quot;,&quot;startTime&quot;:&quot;2025-03-18T10:04:54.577Z&quot;,&quot;LELNo&quot;:false,&quot;isApproved&quot;:false,&quot;corpCredInitCompleted&quot;:true,&quot;isRejectedByCommittee&quot;:false,&quot;stageFacilityCount&quot;:0,&quot;owner&quot;:&quot;TESTUSER1.BNI@CLO.COM&quot;,&quot;googleApiKey&quot;:&quot;AIzaSyBtQIebvdI_GlLgavtqmySE-Iyn0vtNPv4&quot;,&quot;facilitiesCount&quot;:0,&quot;singleDocRequiredStage&quot;:null,&quot;errorMessage&quot;:null,&quot;CaseId&quot;:&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4&quot;,&quot;activationConditionCount&quot;:0,&quot;borrowerReviewList&quot;:[],&quot;OtherDeclineComments&quot;:null,&quot;assigneeId&quot;:&quot;TESTUSER1.BNI@CLO.COM&quot;,&quot;memoDocument&quot;:false,&quot;isWithdrawn&quot;:false,&quot;DeclineReason2&quot;:null,&quot;DeclineReason3&quot;:null,&quot;servicingSystem&quot;:&quot;NA&quot;,&quot;importTryCount&quot;:1,&quot;stages&quot;:[{&quot;stage&quot;:&quot;Application&quot;,&quot;status&quot;:&quot;1&quot;,&quot;stageStartDate&quot;:&quot;2025-03-18T10:04:56.760Z&quot;,&quot;stageEndDate&quot;:null},{&quot;stage&quot;:&quot;Underwriting&quot;,&quot;status&quot;:&quot;0&quot;,&quot;stageStartDate&quot;:null,&quot;stageEndDate&quot;:null},{&quot;stage&quot;:&quot;Credit Decisioning&quot;,&quot;status&quot;:&quot;0&quot;,&quot;stageStartDate&quot;:null,&quot;stageEndDate&quot;:null},{&quot;stage&quot;:&quot;Documentation&quot;,&quot;status&quot;:&quot;0&quot;,&quot;stageStartDate&quot;:null,&quot;stageEndDate&quot;:null},{&quot;stage&quot;:&quot;Closing&quot;,&quot;status&quot;:&quot;0&quot;,&quot;stageStartDate&quot;:null,&quot;stageEndDate&quot;:null}],&quot;FXRateSource&quot;:&quot;CLO&quot;,&quot;baseURL_FE&quot;:&quot;api/omniproxy&quot;,&quot;DeclineReason1&quot;:null,&quot;approvalLevel&quot;:&quot;&quot;,&quot;baseURL_BE&quot;:&quot;api/omniproxy&quot;},&quot;creditReOpenCount&quot;:0,&quot;checklistTask1&quot;:&quot;TSK-bb24a0f8-03e1-11f0-bc6a-000d3a04bee4&quot;,&quot;applicationReferenceId&quot;:&quot;73ba6dd5-d3ef-4c1a-b25d-7d02a4dba5e6&quot;,&quot;LELNo&quot;:false,&quot;isApproved&quot;:false,&quot;corpCredInitCompleted&quot;:true,&quot;isRejectedByCommittee&quot;:false,&quot;stageFacilityCount&quot;:0,&quot;owner&quot;:&quot;TESTUSER1.BNI@CLO.COM&quot;,&quot;googleApiKey&quot;:&quot;AIzaSyBtQIebvdI_GlLgavtqmySE-Iyn0vtNPv4&quot;,&quot;facilitiesCount&quot;:0,&quot;singleDocRequiredStage&quot;:null,&quot;errorMessage&quot;:null,&quot;CaseId&quot;:&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4&quot;,&quot;activationConditionCount&quot;:0,&quot;borrowerReviewList&quot;:[],&quot;OtherDeclineComments&quot;:null,&quot;assigneeId&quot;:&quot;TESTUSER1.BNI@CLO.COM&quot;,&quot;memoDocument&quot;:false,&quot;isWithdrawn&quot;:false,&quot;DeclineReason2&quot;:null,&quot;DeclineReason3&quot;:null,&quot;servicingSystem&quot;:&quot;NA&quot;,&quot;importTryCount&quot;:1,&quot;stages&quot;:[{&quot;stage&quot;:&quot;Application&quot;,&quot;status&quot;:&quot;1&quot;,&quot;stageStartDate&quot;:&quot;2025-03-18T10:04:56.760Z&quot;,&quot;stageEndDate&quot;:null},{&quot;stage&quot;:&quot;Underwriting&quot;,&quot;status&quot;:&quot;0&quot;,&quot;stageStartDate&quot;:null,&quot;stageEndDate&quot;:null},{&quot;stage&quot;:&quot;Credit Decisioning&quot;,&quot;status&quot;:&quot;0&quot;,&quot;stageStartDate&quot;:null,&quot;stageEndDate&quot;:null},{&quot;stage&quot;:&quot;Documentation&quot;,&quot;status&quot;:&quot;0&quot;,&quot;stageStartDate&quot;:null,&quot;stageEndDate&quot;:null},{&quot;stage&quot;:&quot;Closing&quot;,&quot;status&quot;:&quot;0&quot;,&quot;stageStartDate&quot;:null,&quot;stageEndDate&quot;:null}],&quot;self&quot;:{&quot;startUserId&quot;:&quot;TESTUSER1.BNI@CLO.COM&quot;,&quot;name&quot;:&quot;Corporate Test Component | Deal No.BNI-GRP-B31E7E-1204&quot;,&quot;startTime&quot;:&quot;2025-03-18T10:04:54.577Z&quot;,&quot;id&quot;:&quot;CAS-70a319dd-03e0-11f0-bc6a-000d3a04bee4&quot;},&quot;FXRateSource&quot;:&quot;CLO&quot;,&quot;baseURL_FE&quot;:&quot;api/omniproxy&quot;,&quot;DeclineReason1&quot;:null,&quot;approvalLevel&quot;:&quot;&quot;,&quot;baseURL_BE&quot;:&quot;api/omniproxy&quot;,&quot;flowablePayloadHash&quot;:&quot;fa19882ad5c4f8c062bb1a1b837cb77ee58075b771c737d8bd68c4bba7f7239d&quot;,&quot;outcome&quot;:&quot;complete&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="origin" elementType="Header">
                  <stringProp name="Header.name">origin</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_3}</stringProp>
                </elementProp>
                <elementProp name="priority" elementType="Header">
                  <stringProp name="Header.name">priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="referer" elementType="Header">
                  <stringProp name="Header.name">referer</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_3}/cls/bui/mdi/flowable</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;134&quot;, &quot;Not:A-Brand&quot;;v=&quot;24&quot;, &quot;Google Chrome&quot;;v=&quot;134&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-dest" elementType="Header">
                  <stringProp name="Header.name">sec-fetch-dest</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-mode" elementType="Header">
                  <stringProp name="Header.name">sec-fetch-mode</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-site" elementType="Header">
                  <stringProp name="Header.name">sec-fetch-site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="user-agent" elementType="Header">
                  <stringProp name="Header.name">user-agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">x-requested-with</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="x-xsrf-token" elementType="Header">
                  <stringProp name="Header.name">x-xsrf-token</stringProp>
                  <stringProp name="Header.value">${dynamicSigninState}</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="BP01_10_Stage 1 Checklist">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click Button Complete All Checklist" enabled="false">
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/cls/api/omniproxy/flowablework/action-api/action-repository/action-definitions/key/CRED_A007/execute</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="formId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${idForm}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">formId</stringProp>
                </elementProp>
                <elementProp name="formFieldId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">CRED_F006_completeItemsAction</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">formFieldId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="RequestFrom" elementType="Header">
                  <stringProp name="Header.name">RequestFrom</stringProp>
                  <stringProp name="Header.value">Angular</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i </stringProp>
                </elementProp>
                <elementProp name="referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_3}/cls/bui/mdi/flowable</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">Sec-Ch-Ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;134&quot;, &quot;Not:A-Brand&quot;;v=&quot;24&quot;, &quot;Google Chrome&quot;;v=&quot;134&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">Sec-Ch-Ua-Mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">Sec-Ch-Ua-Platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="user-agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="x-xsrf-token" elementType="Header">
                  <stringProp name="Header.name">X-Xsrf-Token</stringProp>
                  <stringProp name="Header.value">${dynamicSigninState}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get data checklist" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/cls/api/omniproxy/flowablework/platform-api/search/query-tasks</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="rootScopeId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${idCAS1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">rootScopeId</stringProp>
                </elementProp>
                <elementProp name="rootScopeType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">cmmn</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">rootScopeType</stringProp>
                </elementProp>
                <elementProp name="completed" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">completed</stringProp>
                </elementProp>
                <elementProp name="includeFields" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">name,assigneeDisplayName,assigneeId,id,caseId,claimedUserId,dueDate,assignee,category,taskDefinitionId,endTime,scopeType,priority,permissions</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">includeFields</stringProp>
                </elementProp>
                <elementProp name="sort" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">priority</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sort</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="RequestFrom" elementType="Header">
                  <stringProp name="Header.name">RequestFrom</stringProp>
                  <stringProp name="Header.value">Angular</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i </stringProp>
                </elementProp>
                <elementProp name="referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_3}/cls/bui/mdi/flowable</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">Sec-Ch-Ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;134&quot;, &quot;Not:A-Brand&quot;;v=&quot;24&quot;, &quot;Google Chrome&quot;;v=&quot;134&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">Sec-Ch-Ua-Mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">Sec-Ch-Ua-Platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="user-agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="x-xsrf-token" elementType="Header">
                  <stringProp name="Header.name">X-Xsrf-Token</stringProp>
                  <stringProp name="Header.value">${dynamicSigninState}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get checklist Create/Update Facility Data" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">chkFacilityData</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;\s*:\s*&quot;([^&quot;]+)&quot;(?:\s*,\s*&quot;[^&quot;]*&quot;\s*:\s*&quot;[^&quot;]*&quot;)*?\s*,\s*&quot;name&quot;\s*:\s*&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get checklist Check and update Pricing details" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">chkPricing</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;\s*:\s*&quot;([^&quot;]+)&quot;\s*,\s*&quot;assignee&quot;\s*:\s*&quot;[^&quot;]*&quot;\s*,\s*&quot;name&quot;\s*:\s*&quot;(Check and update Pricing details)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get checklist Create/Update Collateral Data" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">chkCollateral</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;\s*:\s*&quot;([^&quot;]+)&quot;\s*,\s*&quot;assignee&quot;\s*:\s*&quot;[^&quot;]*&quot;\s*,\s*&quot;name&quot;\s*:\s*&quot;(Create\/Update Collateral Data)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get checklist Create/Update Covenant &amp; Conditions" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">chkCovenantConditions</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;\s*:\s*&quot;([^&quot;]+)&quot;\s*,\s*&quot;assignee&quot;\s*:\s*&quot;[^&quot;]*&quot;\s*,\s*&quot;name&quot;\s*:\s*&quot;(Create\/Update Covenant &amp; Conditions)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get checklist Check Financial Ananlysis data, Risk Rating and Update the Exposure" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">chkFinancial</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;\s*:\s*&quot;([^&quot;]+)&quot;\s*,\s*&quot;assignee&quot;\s*:\s*&quot;[^&quot;]*&quot;\s*,\s*&quot;name&quot;\s*:\s*&quot;(Check Financial Ananlysis data, Risk Rating and Update the Exposure)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get checklist Completing Executive Summary, Full MPK and Appendix" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">chkCreditMemo</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;\s*:\s*&quot;([^&quot;]+)&quot;\s*,\s*&quot;assignee&quot;\s*:\s*&quot;[^&quot;]*&quot;\s*,\s*&quot;name&quot;\s*:\s*&quot;(Completing Executive Summary, Full MPK and Appendix)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get checklist Input Risk Analysis data in MPK" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">chkRisk</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;\s*:\s*&quot;([^&quot;]+)&quot;\s*,\s*&quot;assignee&quot;\s*:\s*&quot;[^&quot;]*&quot;\s*,\s*&quot;name&quot;\s*:\s*&quot;(Input Risk Analysis data in MPK)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get checklist Update Approving Authority Details" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">chkApproving</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;\s*:\s*&quot;([^&quot;]+)&quot;\s*,\s*&quot;assignee&quot;\s*:\s*&quot;[^&quot;]*&quot;\s*,\s*&quot;name&quot;\s*:\s*&quot;(Update Approving Authority Details)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get checklist Check and Update Bank Statement Analysis" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">chkBankStatement</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;\s*:\s*&quot;([^&quot;]+)&quot;\s*,\s*&quot;assignee&quot;\s*:\s*&quot;[^&quot;]*&quot;\s*,\s*&quot;name&quot;\s*:\s*&quot;(Check and Update Bank Statement Analysis)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get checklist Check Dukcapil Status" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">chkDukcapil</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;\s*:\s*&quot;([^&quot;]+)&quot;\s*,\s*&quot;assignee&quot;\s*:\s*&quot;[^&quot;]*&quot;\s*,\s*&quot;name&quot;\s*:\s*&quot;(Check Dukcapil Status)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get checklist Prepare Presentation for Commitee" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">chkPrepare</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;\s*:\s*&quot;([^&quot;]+)&quot;\s*,\s*&quot;assignee&quot;\s*:\s*&quot;[^&quot;]*&quot;\s*,\s*&quot;name&quot;\s*:\s*&quot;(Prepare Presentation for Commitee)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Complete All Checklist" enabled="true">
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/cls/api/omniproxy/flowablework/action-api/action-repository/action-definitions/key/CRED_A007/execute?formId=${idForm}&amp;formFieldId=CRED_F006_completeItemsAction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;checklists&quot;:[{&quot;id&quot;:&quot;${chkFacilityData}&quot;,&quot;assignee&quot;:&quot;${initiator}&quot;,&quot;name&quot;:&quot;Create/Update Facility Data&quot;,&quot;priority&quot;:59,&quot;scopeType&quot;:&quot;bpmn&quot;,&quot;category&quot;:&quot;checklist&quot;,&quot;taskDefinitionId&quot;:&quot;bpmnTask_5&quot;,&quot;assigneeDisplayName&quot;:&quot;${name}&quot;,&quot;isChecklistComplete&quot;:true},{&quot;id&quot;:&quot;${chkPricing}&quot;,&quot;assignee&quot;:&quot;${initiator}&quot;,&quot;name&quot;:&quot;Check and update Pricing details&quot;,&quot;priority&quot;:58,&quot;scopeType&quot;:&quot;bpmn&quot;,&quot;category&quot;:&quot;checklist&quot;,&quot;taskDefinitionId&quot;:&quot;bpmnTask_7&quot;,&quot;assigneeDisplayName&quot;:&quot;${name}&quot;,&quot;isChecklistComplete&quot;:true},{&quot;id&quot;:&quot;${chkCollateral}&quot;,&quot;assignee&quot;:&quot;${initiator}&quot;,&quot;name&quot;:&quot;Create/Update Collateral Data&quot;,&quot;priority&quot;:57,&quot;scopeType&quot;:&quot;bpmn&quot;,&quot;category&quot;:&quot;checklist&quot;,&quot;taskDefinitionId&quot;:&quot;bpmnTask_8&quot;,&quot;assigneeDisplayName&quot;:&quot;${name}&quot;,&quot;isChecklistComplete&quot;:true},{&quot;id&quot;:&quot;${chkCovenantConditions}&quot;,&quot;assignee&quot;:&quot;${initiator}&quot;,&quot;name&quot;:&quot;Create/Update Covenant &amp; Conditions&quot;,&quot;priority&quot;:56,&quot;scopeType&quot;:&quot;bpmn&quot;,&quot;category&quot;:&quot;checklist&quot;,&quot;taskDefinitionId&quot;:&quot;bpmnTask_10&quot;,&quot;assigneeDisplayName&quot;:&quot;${name}&quot;,&quot;isChecklistComplete&quot;:true},{&quot;id&quot;:&quot;${chkFinancial}&quot;,&quot;assignee&quot;:&quot;${initiator}&quot;,&quot;name&quot;:&quot;Check Financial Ananlysis data, Risk Rating and Update the Exposure&quot;,&quot;priority&quot;:55,&quot;scopeType&quot;:&quot;bpmn&quot;,&quot;category&quot;:&quot;checklist&quot;,&quot;taskDefinitionId&quot;:&quot;bpmnTask_12&quot;,&quot;assigneeDisplayName&quot;:&quot;${name}&quot;,&quot;isChecklistComplete&quot;:true},{&quot;id&quot;:&quot;${chkCreditMemo}&quot;,&quot;assignee&quot;:&quot;${initiator}&quot;,&quot;name&quot;:&quot;Completing Executive Summary, Full MPK and Appendix&quot;,&quot;priority&quot;:54,&quot;scopeType&quot;:&quot;bpmn&quot;,&quot;category&quot;:&quot;checklist&quot;,&quot;taskDefinitionId&quot;:&quot;bpmnTask_14&quot;,&quot;assigneeDisplayName&quot;:&quot;${name}&quot;,&quot;isChecklistComplete&quot;:true},{&quot;id&quot;:&quot;${chkRisk}&quot;,&quot;assignee&quot;:&quot;${initiator}&quot;,&quot;name&quot;:&quot;Input Risk Analysis data in MPK&quot;,&quot;priority&quot;:53,&quot;scopeType&quot;:&quot;bpmn&quot;,&quot;category&quot;:&quot;checklist&quot;,&quot;taskDefinitionId&quot;:&quot;bpmnTask_16&quot;,&quot;assigneeDisplayName&quot;:&quot;${name}&quot;,&quot;isChecklistComplete&quot;:true},{&quot;id&quot;:&quot;${chkApproving}&quot;,&quot;assignee&quot;:&quot;${initiator}&quot;,&quot;name&quot;:&quot;Update Approving Authority Details&quot;,&quot;priority&quot;:52,&quot;scopeType&quot;:&quot;bpmn&quot;,&quot;category&quot;:&quot;checklist&quot;,&quot;taskDefinitionId&quot;:&quot;bpmnTask_18&quot;,&quot;assigneeDisplayName&quot;:&quot;${name}&quot;,&quot;isChecklistComplete&quot;:true},{&quot;id&quot;:&quot;${chkBankStatement}&quot;,&quot;assignee&quot;:&quot;${initiator}&quot;,&quot;name&quot;:&quot;Check and Update Bank Statement Analysis&quot;,&quot;priority&quot;:51,&quot;scopeType&quot;:&quot;bpmn&quot;,&quot;category&quot;:&quot;checklist&quot;,&quot;taskDefinitionId&quot;:&quot;bpmnTask_20&quot;,&quot;assigneeDisplayName&quot;:&quot;${name}&quot;,&quot;isChecklistComplete&quot;:true},{&quot;id&quot;:&quot;${chkDukcapil}&quot;,&quot;assignee&quot;:&quot;${initiator}&quot;,&quot;name&quot;:&quot;Check Dukcapil Status&quot;,&quot;priority&quot;:51,&quot;scopeType&quot;:&quot;bpmn&quot;,&quot;category&quot;:&quot;checklist&quot;,&quot;taskDefinitionId&quot;:&quot;bpmnTask_45&quot;,&quot;assigneeDisplayName&quot;:&quot;${name}&quot;,&quot;isChecklistComplete&quot;:true},{&quot;id&quot;:&quot;${chkPrepare}&quot;,&quot;assignee&quot;:&quot;${initiator}&quot;,&quot;name&quot;:&quot;Prepare Presentation for Commitee&quot;,&quot;priority&quot;:50,&quot;scopeType&quot;:&quot;cmmn&quot;,&quot;category&quot;:&quot;checklistNonBlocking&quot;,&quot;taskDefinitionId&quot;:&quot;cmmnTask_79&quot;,&quot;assigneeDisplayName&quot;:&quot;${name}&quot;,&quot;assigneeId&quot;:&quot;${initiator}&quot;,&quot;isChecklistComplete&quot;:true}],&quot;facilityChecklists&quot;:[],&quot;applicationReferenceId&quot;:&quot;b41c13d1-d80d-454a-8456-f49f62cca453&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="RequestFrom" elementType="Header">
                  <stringProp name="Header.name">RequestFrom</stringProp>
                  <stringProp name="Header.value">Angular</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i </stringProp>
                </elementProp>
                <elementProp name="referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${BASE_URL_3}/cls/bui/mdi/flowable</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua" elementType="Header">
                  <stringProp name="Header.name">Sec-Ch-Ua</stringProp>
                  <stringProp name="Header.value">&quot;Chromium&quot;;v=&quot;134&quot;, &quot;Not:A-Brand&quot;;v=&quot;24&quot;, &quot;Google Chrome&quot;;v=&quot;134&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-mobile" elementType="Header">
                  <stringProp name="Header.name">Sec-Ch-Ua-Mobile</stringProp>
                  <stringProp name="Header.value">?0</stringProp>
                </elementProp>
                <elementProp name="sec-ch-ua-platform" elementType="Header">
                  <stringProp name="Header.name">Sec-Ch-Ua-Platform</stringProp>
                  <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="sec-fetch-site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="user-agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="x-xsrf-token" elementType="Header">
                  <stringProp name="Header.name">X-Xsrf-Token</stringProp>
                  <stringProp name="Header.value">${dynamicSigninState}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
